// Режимы работы
// 0- Выбор хранимых типов
// 1- типы для запроса
// 2- типы для поля СКД
// 3- типы для параметра СКД
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РежимРаботы=1;
	ЗаполнитьДеревоТипов();
	
	УстановитьУсловноеОформление();
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ДеревоТиповПриАктивизацииСтроки(Элемент)
	ТекДанные=Элементы.ДеревоТипов.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаКвалификаторЧисла.Видимость=ТекДанные.Имя="Число";
	Элементы.ГруппаКвалификаторСтроки.Видимость=ТекДанные.Имя="Строка";
	Элементы.ГруппаКвалификаторДаты.Видимость=ТекДанные.Имя="Дата";
	
КонецПроцедуры

&НаКлиенте
Процедура НеограниченнаяДлинаСтрокиПриИзменении(Элемент)
	Если НеограниченнаяДлинаСтроки Тогда
		ДлинаСтроки=0;
		ДопустамаяДлинаСтрокиФиксированная=Ложь;
	КонецЕсли;
	Элементы.ДопустамаяДлинаСтрокиФиксированная.Доступность=Не НеограниченнаяДлинаСтроки;
КонецПроцедуры

&НаКлиенте
Процедура ДлинаСтрокиПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ДлинаСтроки) Тогда
		НеограниченнаяДлинаСтроки=Истина;
		ДопустамаяДлинаСтрокиФиксированная=Ложь;
	Иначе
		НеограниченнаяДлинаСтроки=Ложь;
	КонецЕсли;
	Элементы.ДопустамаяДлинаСтрокиФиксированная.Доступность=Не НеограниченнаяДлинаСтроки;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ЗаполнитьДеревоТипов();
	РазвернутьЭлементыДерева();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДоступноХранилищеЗначений()
	Возврат Истина;	
КонецФункции
&НаСервере
Функция ДоступноNull()
	Возврат РежимРаботы<>0;	
КонецФункции
&НаСервере
Функция ТипыДляЗапроса()
	Возврат РежимРаботы=1;	
КонецФункции


&НаСервере
Функция ДобавитьТипВДеревоТипов(ИмяТипа, Картинка, Представление = "", СтрокаДерева = Неопределено, ЭтоГруппа = Ложь, Групповой=Ложь)
	Если ЗначениеЗаполнено(СтрокаПоиска) и Не Групповой Тогда
		Если СтрНайти(НРег(ИмяТипа), НРег(СтрокаПоиска))=0 И СтрНайти(НРег(Представление),НРег(СтрокаПоиска))=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева = Неопределено Тогда
		ЭлементДобавления=ДеревоТипов;
	Иначе
		ЭлементДобавления=СтрокаДерева;
	КонецЕсли;

	НоваяСтрока=ЭлементДобавления.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Имя=ИмяТипа;
	Если ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока.Представление=Представление;
	Иначе
		НоваяСтрока.Представление=ИмяТипа;
	КонецЕсли;
	НоваяСтрока.Картинка=Картинка;
	НоваяСтрока.ЭтоГруппа=ЭтоГруппа;
	
	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Процедура ЗаполнитьТипыПоВидуОбъекта(ВидОбъектовМетаданных, ПрефиксТипа, Картинка)
	КоллекцияОбъектов=Метаданные[ВидОбъектовМетаданных];
	
	СтрокаКоллекции=ДобавитьТипВДеревоТипов(ПрефиксТипа,Картинка,ПрефиксТипа,,,Истина);
	
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектов Цикл
		ДобавитьТипВДеревоТипов(ПрефиксТипа+"."+ОбъектМетаданных.Имя, Картинка,ОбъектМетаданных.Имя,СтрокаКоллекции);
	КонецЦикла;
	
	УдалитьСтрокуДереваЕслиНетПодчиненныхПриПоиске(СтрокаКоллекции);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримитивныеТипы()
	ДобавитьТипВДеревоТипов("Произвольный", БиблиотекаКартинок.УИ_ПроизвольныйТип);
	ДобавитьТипВДеревоТипов("Число", БиблиотекаКартинок.УИ_Число);
	ДобавитьТипВДеревоТипов("Строка", БиблиотекаКартинок.УИ_Строка);
	ДобавитьТипВДеревоТипов("Дата", БиблиотекаКартинок.УИ_Дата);
	ДобавитьТипВДеревоТипов("Булево", БиблиотекаКартинок.УИ_Булево);
	Если ДоступноХранилищеЗначений() Тогда
		ДобавитьТипВДеревоТипов("ХранилищеЗначений", Новый Картинка);
	КонецЕсли;
	Если ТипыДляЗапроса() Тогда
		ДобавитьТипВДеревоТипов("ТаблицаЗначений", БиблиотекаКартинок.УИ_ТаблицаЗначений);
		ДобавитьТипВДеревоТипов("СписокЗначений", БиблиотекаКартинок.УИ_СписокЗначений);
		ДобавитьТипВДеревоТипов("Массив", БиблиотекаКартинок.УИ_Массив);
		ДобавитьТипВДеревоТипов("Тип", БиблиотекаКартинок.ВыбратьТип);
		ДобавитьТипВДеревоТипов("МоментВремени", БиблиотекаКартинок.УИ_МоментВремени);
		ДобавитьТипВДеревоТипов("Граница", БиблиотекаКартинок.УИ_Граница);
	КонецЕсли;
	
	ДобавитьТипВДеревоТипов("УникальныйИдентификатор", БиблиотекаКартинок.УИ_УникальныйИдентификатор);
	Если ДоступноNull() Тогда
		ДобавитьТипВДеревоТипов("Null", БиблиотекаКартинок.УИ_Null);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыХарактеристик()
	//Характеристики
	ПланыВидов=Метаданные.ПланыВидовХарактеристик;
	Если ПланыВидов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаХарактеристик=ДобавитьТипВДеревоТипов("Характеристики", БиблиотекаКартинок.Папка,,,Истина,Истина);
	
	Для Каждого План Из ПланыВидов Цикл
		ДобавитьТипВДеревоТипов("Характеристика."+План.Имя,Новый Картинка,План.Имя,СтрокаХарактеристик);
	КонецЦикла;
	
	УдалитьСтрокуДереваЕслиНетПодчиненныхПриПоиске(СтрокаХарактеристик);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОпределяемыеТипы()
	//Характеристики
	Типы=Метаданные.ОпределяемыеТипы;
	Если Типы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТипа=ДобавитьТипВДеревоТипов("ОпределяемыйТип", БиблиотекаКартинок.Папка,,,Истина, Истина);
	
	Для Каждого ОпределяемыйТип Из Типы Цикл
		ДобавитьТипВДеревоТипов("ОпределяемыйТип."+ОпределяемыйТип.Имя,Новый Картинка,ОпределяемыйТип.Имя,СтрокаТипа);
	КонецЦикла;
	УдалитьСтрокуДереваЕслиНетПодчиненныхПриПоиске(СтрокаТипа);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыСистемныеПеречисления()
	СтрокаТипа=ДобавитьТипВДеревоТипов("СистемныеПеречисления", БиблиотекаКартинок.Папка,"Системные перечисления",,Истина, Истина);

	ДобавитьТипВДеревоТипов("ВидДвиженияНакопления",БиблиотекаКартинок.УИ_ВидДвиженияНакопления,,СтрокаТипа);
	ДобавитьТипВДеревоТипов("ВидСчета",БиблиотекаКартинок.ПланСчетовОбъект,,СтрокаТипа);
	ДобавитьТипВДеревоТипов("ВидДвиженияБухгалтерии",БиблиотекаКартинок.ПланСчетов,,СтрокаТипа);
	ДобавитьТипВДеревоТипов("ИспользованиеАгрегатаРегистраНакопления",Новый Картинка,,СтрокаТипа);
	ДобавитьТипВДеревоТипов("ПериодичностьАгрегатаРегистраНакопления",Новый Картинка,,СтрокаТипа);
	
	УдалитьСтрокуДереваЕслиНетПодчиненныхПриПоиске(СтрокаТипа);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоТипов()
	ДеревоТипов.ПолучитьЭлементы().Очистить();
	ЗаполнитьПримитивныеТипы();
	ЗаполнитьТипыПоВидуОбъекта("Справочники", "СправочникСсылка",БиблиотекаКартинок.Справочник);
	ЗаполнитьТипыПоВидуОбъекта("Документы", "ДокументСсылка",БиблиотекаКартинок.Документ);
	ЗаполнитьТипыПоВидуОбъекта("ПланыВидовХарактеристик", "ПланВидовХарактеристикСсылка", БиблиотекаКартинок.ПланВидовХарактеристик);
	ЗаполнитьТипыПоВидуОбъекта("ПланыСчетов", "ПланСчетовСсылка", БиблиотекаКартинок.ПланСчетов);
	ЗаполнитьТипыПоВидуОбъекта("ПланыВидовРасчета", "ПланВидовРасчетаСсылка", БиблиотекаКартинок.ПланВидовРасчета);
	ЗаполнитьТипыПоВидуОбъекта("ПланыОбмена", "ПланОбменаСсылка", БиблиотекаКартинок.ПланОбмена);
	ЗаполнитьТипыПоВидуОбъекта("Перечисления", "ПеречислениеСсылка", БиблиотекаКартинок.Перечисление);
	ЗаполнитьТипыПоВидуОбъекта("БизнесПроцессы", "БизнесПроцессСсылка", БиблиотекаКартинок.БизнесПроцесс);
	ЗаполнитьТипыПоВидуОбъекта("Задачи", "ЗадачаСсылка", БиблиотекаКартинок.Задача);
	//ЗаполнитьТипыПоВидуОбъекта("ТочкиМаршрутаБизнесПроцессаСсылка", "ТочкаМаршрутаБизнесПроцессаСсылка");
	
	ЗаполнитьТипыХарактеристик();
	Попытка
		ЗаполнитьОпределяемыеТипы();
	Исключение
	КонецПопытки;
	ДобавитьТипВДеревоТипов("ЛюбаяСсылка", Новый Картинка, "Любая ссылка");

	
	Если РежимРаботы=3 Тогда
		ДобавитьТипВДеревоТипов("СтандартныйПериод", Новый Картинка, "Стандартный период");
		ЗаполнитьТипыСистемныеПеречисления();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	// Группы нелья выбирать
	НовоеУО=УсловноеОформление.Элементы.Добавить();
	НовоеУО.Использование=Истина;
	УИ_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовоеУО.Отбор,
		"Элементы.ДеревоТипов.ТекущиеДанные.ЭтоГруппа", Истина);
	Поле=НовоеУО.Поля.Элементы.Добавить();
	Поле.Использование=Истина;
	Поле.Поле=Новый ПолеКомпоновкиДанных("ДеревоТиповВыбран");

	Оформление=НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Отображать"));
	Оформление.Использование=Истина;
	Оформление.Значение=Ложь;
	
	// Если строка неограниченная то нельзя менять допустимую длину строки
	НовоеУО=УсловноеОформление.Элементы.Добавить();
	НовоеУО.Использование=Истина;
	УИ_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовоеУО.Отбор,
		"ДлинаСтроки", 0);
	Поле=НовоеУО.Поля.Элементы.Добавить();
	Поле.Использование=Истина;
	Поле.Поле=Новый ПолеКомпоновкиДанных("ДопустамаяДлинаСтрокиФиксированная");

	Оформление=НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТолькоПросмотр"));
	Оформление.Использование=Истина;
	Оформление.Значение=Истина;
	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуДереваЕслиНетПодчиненныхПриПоиске(СтрокаДерева)
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаДерева.ПолучитьЭлементы().Количество()=0 Тогда
		ДеревоТипов.ПолучитьЭлементы().Удалить(СтрокаДерева);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЭлементыДерева()
	Для каждого СтрокаДерева Из ДеревоТипов.ПолучитьЭлементы() Цикл 
		Элементы.ДеревоТипов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

#КонецОбласти