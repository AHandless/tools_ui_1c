&НаКлиенте
Перем мИмяОбработки;

&НаКлиенте
Перем мЗакрытьФормуБезВопросов;

&НаКлиенте
Перем мИзмененныеДанные;

&НаКлиенте
Перем мТекСтрокаДереваЗапросов;

&НаКлиенте
Перем мТекСтрокаДереваАлгоритмов;

&НаКлиенте
Перем мТекСтрокаСпискаВТ;

&НаКлиенте
Перем мИсточникКопирования;

&НаКлиенте
Перем мИсточникПеретаскивания;

&НаКлиенте
Перем мСтрокаПеретаскивания;

&НаКлиенте
Перем мТипХЗ;
#Область СервисныеФункции

&НаСервере
Функция вПреобразоватьРеквизитФормыВСтрокуВнутр(Знач ИмяРеквизита)
	Значение = РеквизитФормыВЗначение(ИмяРеквизита);
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеВСтрокуВнутр(Знач Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеИзСтрокиВнутр(Знач Значение)
	Возврат ЗначениеИзСтрокиВнутр(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция вЗапросВСтрокуXML(Запрос)
	Структура = Новый Структура("Текст, Параметры");
	ЗаполнитьЗначенияСвойств(Структура, Запрос);

	Возврат вЗначениеВСтрокуXML(Структура);
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеВСтрокуXML(Значение)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеИзСтрокиXML(СтрокаXML)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);

	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПолноеИмяМД(Ссыдка)
	Попытка
		Возврат Ссыдка.Метаданные().ПолноеИмя();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьПустойУникальныйИдентификатор()
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вДлительностьИнтервала(Знач ЧислоСекунд)
	Часы = Цел(ЧислоСекунд / 3600);
	Минуты = Цел((ЧислоСекунд % 3600) / 60);
	Секунды = ЧислоСекунд % 60;

	Возврат "" + Формат(Часы, "ЧН=0") + ":" + Формат(Минуты, "ЧЦ=2;ЧВН=;ЧН=00") + ":" + Формат(Секунды,
		"ЧЦ=2;ЧВН=;ЧН=00");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вСоздатьМассив(Значение)
	Массив = Новый Массив;
	Массив.Добавить(Значение);

	Возврат Массив;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вСообщитьОбОшибке(Текст)
	Сообщить(Текст, СтатусСообщения.Важное);
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция вФайлСуществует(ИмяФайл)
	Если _СинхронныеВызовыЗапрещены Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка
		Файл = Новый Файл(ИмяФайл);
		Возврат Файл.Существует() И Файл.ЭтоФайл();
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция вПотомокПроисходитОтПредка(Предок, Потомок)
	Отец = Потомок.ПолучитьРодителя();

	Пока Отец <> Неопределено Цикл
		Если Отец = Предок Тогда
			Возврат Истина;
		КонецЕсли;

		Отец = Отец.ПолучитьРодителя();
	КонецЦикла;

	Возврат Ложь;
КонецФункции

#КонецОбласти
#Область СервисДляИнтерактива

&НаКлиенте
Процедура вПоказатьПредупреждение(ТекстПредупреждения)
	ПоказатьПредупреждение( , ТекстПредупреждения, 10);
КонецПроцедуры

&НаКлиенте
Процедура вБудетРеализованоПозже()
	вПоказатьПредупреждение("Будет реализовано в следующих версиях!");
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьВопрос(ИмяПроцедуры, ТекстВопроса, ДопПараметры = Неопределено)
	ПоказатьВопрос(Новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ДопПараметры), ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьПростойВопрос(ИмяПроцедуры, ТекстВопроса, ДопПараметры = Неопределено)
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("__ИмяПроцедуры", ИмяПроцедуры);
	ПоказатьВопрос(Новый ОписаниеОповещения("вОбработатьРезультатВопроса", ЭтаФорма, ДопПараметры), ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьРезультатВопроса(РезультатВопроса, ДопПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Выполнить (ДопПараметры.__ИмяПроцедуры + "(ДопПараметры)");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаДанных(Открытие = Истина, ПутьКФайлу = "")
	пСтрук = вРазобратьПутьКФайлу(ПутьКФайлу);

	Диалог = Новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Каталог = пСтрук.Каталог;
	Диалог.ПолноеИмяФайла = пСтрук.Имя;
	Диалог.Заголовок  = "Файл данных";
	Диалог.Фильтр     = "Файлы данных (*.dat)|*.dat|Все файлы (*.*)|*.*";
	Диалог.Расширение = "dat";

	Возврат Диалог;
КонецФункции

&НаКлиенте
Функция вРазобратьПутьКФайлу(ПутьКФайлу)
	пСтрук = Новый Структура("Каталог, Имя", "", "");

	Если Не ПустаяСтрока(ПутьКФайлу) Тогда
		Поз = СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз <> 0 Тогда
			пСтрук.Каталог = СокрЛП(Лев(ПутьКФайлу, Поз - 1));
			пСтрук.Имя = СокрЛП(Сред(ПутьКФайлу, Поз + 1));
		Иначе
			пСтрук.Имя = СокрЛП(ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;

	Возврат пСтрук;
КонецФункции

#КонецОбласти
#Область ОписаниеОбработки

&НаКлиенте
Процедура вПустойОбработчикОповещения(КодВозврата = Неопределено, ДопПарам = Неопределено) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти
#Область СобытияФормы

&НаКлиенте
Процедура вСформироватьЗаголовокКлиент()
	Если _ПоказыватьФайлЗапросовВЗаголовке И Не ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		Заголовок = "Файл: " + _ПутьКФайлуЗапросов;
	ИначеЕсли _ПоказыватьФайлЗапросовВЗаголовке Тогда
		Заголовок="Новый файл";

	Иначе
		Заголовок="";
	КонецЕсли;

#Если ТонкийКлиент Тогда
	Заголовок = Заголовок + " (тонкий клиент)";
#ИначеЕсли ВебКлиент Тогда
	Заголовок = Заголовок + " (web клиент)";
#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Заголовок = Заголовок + " (обычное приложение)";
	_ЭтоТолстыйКлиент = Истина;
#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Заголовок = Заголовок + " (толстый клиент)";
#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Попытка
		Если Метаданные.РежимИспользованияМодальности
			= Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.НеИспользовать Тогда
			_ДиалогиЗапрещены = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Попытка
		Если Метаданные.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент
			= Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.НеИспользовать
			Или Метаданные.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент
			= Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.ИспользоватьСПредупреждениями Тогда
			_СинхронныеВызовыЗапрещены = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Если Параметры.Свойство("ДанныеОтладки") Тогда
		АдресДанныхОтладки=ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Параметры.ДанныеОтладки),
			УникальныйИдентификатор);
		_ПутьКФайлуЗапросов="";
		_ПутьКФайлуАлгоритмов="";
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мЗакрытьФормуБезВопросов = Ложь;
	вСброситьФлагИзмененияДанных();

#Если ТонкийКлиент Тогда
	Заголовок = Заголовок + " (тонкий клиент)";
#ИначеЕсли ВебКлиент Тогда
	Заголовок = Заголовок + " (web клиент)";
#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Заголовок = Заголовок + " (обычное приложение)";
	_ЭтоТолстыйКлиент = Истина;
#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Заголовок = Заголовок + " (толстый клиент)";
	_ЭтоТолстыйКлиент = Истина;
#Иначе
		Отказ = Истина;
		Возврат;
#КонецЕсли

	Если _ПоказыватьФайлЗапросовВЗаголовке И Не ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		Заголовок = Заголовок + " (" + _ПутьКФайлуЗапросов + ")";
	КонецЕсли;

	мИмяОбработки = вПолучитьИмяОбработки();
	мИсточникКопирования = -1;
	мТекСтрокаДереваЗапросов = -1;
	мТекСтрокаДереваАлгоритмов = -1;
	мТекСтрокаСпискаВТ = -1;

	мТипХЗ = Тип("ХранилищеЗначения");

	_ВыполнятьАлгоритмНаСервере = Истина;
	_ИспользоватьПопыткуДляАлгоритма = Истина;

	вОчиститьДеревоЗапросов();
	вОчиститьДеревоАлгоритмов();

	вЗагрузитьНастройкиОбработки();

	вУстановитьВидимостьРаздела_ВременныеТаблицы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если мЗакрытьФормуБезВопросов = Истина Или _ЗадаватьВопросПриЗакрытии = Ложь Тогда
		Возврат;
	КонецЕсли;

	Если вДанныеИзменены() Тогда
		Если ЗавершениеРаботы = Неопределено Тогда
			// для старых версии платформы
			Отказ = Истина;
			вПоказатьПростойВопрос("вЗакрытьФорму", "Консоль запросов будет закрыта. Продолжить?");
			Возврат;
		КонецЕсли;

		Если ЗавершениеРаботы = Истина Тогда
			Отказ = Истина;
			ТекстПредупреждения = "Есть не сохраненные данные в консоли запросов";
		Иначе
			Отказ = Истина;
			вПоказатьПростойВопрос("вЗакрытьФорму", "Консоль запросов будет закрыта. Продолжить?");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗакрытьФорму(ДопПараметры = Неопределено) Экспорт
	мЗакрытьФормуБезВопросов = Истина;
	ЭтаФорма.Закрыть();
КонецПроцедуры

#КонецОбласти
#Область КомандыФормы

&НаКлиенте
Процедура _СкрытьДеревоЗапросов(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	ЭФ = Элементы.Форма_СкрытьДеревоЗапросов;
	ЭФ.Пометка = Не ЭФ.Пометка;
	Элементы.ГруппаДеревоЗапросов.Видимость = ЭФ.Пометка;
	Элементы.Форма_ЗагрузитьФайлЗапросов.Доступность = ЭФ.Пометка;
	Элементы.Форма_ОчиститьДеревоЗапросов.Доступность = ЭФ.Пометка;
	Элементы._ПутьКФайлуЗапросов.ТолькоПросмотр = Не ЭФ.Пометка;
	Элементы._ПеречитатьФайлЗапросов.Доступность = ЭФ.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура _СкрытьПанельРезультатов(Команда)
	ЭФ = Элементы.Форма_СкрытьПанельРезультатов;
	ЭФ.Пометка = Не ЭФ.Пометка;
	Элементы.ГруппаРезультаты.Видимость = ЭФ.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьВНовомОкне(Команда)
	ОткрытьФорму("Обработка.УИ_КонсольЗапросов.Форма.Форма", , ТекущаяУниверсальнаяДатаВМиллисекундах());
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаДляКонфигуратора(Команда)
	Текст=_ТекстЗапроса.ПолучитьТекст();
	Если Не ЗначениеЗаполнено(Текст) Тогда
		ПоказатьПредупреждение( , "Отсутствует текст запроса.");
		Возврат;
	КонецЕсли;

	пНазваниеЗапроса="Запрос";

	КодЗапроса = пНазваниеЗапроса + " = Новый Запрос;" + Символы.ПС;
	КодЗапроса = КодЗапроса + "Запрос.Текст=" + Символы.ПС;
	КодЗапроса = КодЗапроса + """" + СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|") + """;" + Символы.ПС;

	Если _ПараметрыЗапроса.Количество() > 0 Тогда
		КодЗапроса=КодЗапроса + Символы.ПС;
	КонецЕсли;

	Для Каждого ПараметрЗапроса Из _ПараметрыЗапроса Цикл
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("СписокЗначений") Тогда
			Если ПараметрЗапроса.Значение.Количество() > 0 Тогда
				КодЗапроса = КодЗапроса + ПараметрЗапроса.Имя + " = Новый Массив;" + Символы.ПС;
				Для Каждого элСписка Из ПараметрЗапроса.Значение Цикл
					текстЭлемента = ПолучитьТекстПараметра(элСписка.Значение);
					КодЗапроса = КодЗапроса + ПараметрЗапроса.Имя + ".Добавить(" + текстЭлемента + ");" + Символы.ПС;
				КонецЦикла;
				КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".УстановитьПараметр(""" + ПараметрЗапроса.Имя + ""","
					+ ПараметрЗапроса.Имя + ");" + Символы.ПС;
			КонецЕсли;
		Иначе
			текстПараметр = ПолучитьТекстПараметра(ПараметрЗапроса.Значение);
			КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".УстановитьПараметр(""" + ПараметрЗапроса.Имя + ""","
				+ текстПараметр + ");" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;

	КодЗапроса = КодЗапроса + Символы.ПС + "Выборка = " + пНазваниеЗапроса + ".Выполнить().Выбрать();" + Символы.ПС;
	КодЗапроса = КодЗапроса + "Пока Выборка.Следующий() Цикл" + Символы.ПС;
	КодЗапроса = КодЗапроса + "//" + Символы.ПС;
	КодЗапроса = КодЗапроса + "КонецЦикла;" + Символы.ПС;

	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("Текст", КодЗапроса);
	ОткрытьФорму("ОбщаяФорма.УИ_ФормаРедактированияТекста", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры
#КонецОбласти
#Область КонтрольИзмененияДанных

&НаКлиенте
Функция вСброситьФлагИзмененияДанных()
	мИзмененныеДанные = Новый Структура("Запросы, Алгоритмы", Ложь, Ложь);
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция вДанныеИзменены()
	Возврат (мИзмененныеДанные.Запросы Или мИзмененныеДанные.Алгоритмы);
КонецФункции

&НаКлиенте
Функция вЗапросыИзменены(Значение = Неопределено)
	Если Значение = Неопределено Тогда
		Возврат мИзмененныеДанные.Запросы;
	КонецЕсли;

	мИзмененныеДанные.Запросы = Значение;
	Модифицированность = вДанныеИзменены();
	Возврат Значение;
КонецФункции

&НаКлиенте
Функция вАлгоритмыИзменены(Значение = Неопределено)
	Если Значение = Неопределено Тогда
		Возврат мИзмененныеДанные.Алгоритмы;
	КонецЕсли;

	мИзмененныеДанные.Алгоритмы = Значение;
	Модифицированность = вДанныеИзменены();
	Возврат Значение;
КонецФункции

#КонецОбласти
#Область НастройкиОбработки

&НаСервере
Процедура ЗаполнитьЗапросДляОтладки(КореньДерева, ИдентификаторСозданнойСтроки)
	ЭлементыДерева=_ДеревоЗапросов.НайтиПоИдентификатору(КореньДерева).ПолучитьЭлементы();
	ЭлементыДерева.Очистить();

	ДанныеДляОтладки = ПолучитьИзВременногоХранилища(АдресДанныхОтладки);

	НовыйЗапрос=ЭлементыДерева.Добавить();
	НовыйЗапрос.Имя="Отладка";
	НовыйЗапрос.Текст=ДанныеДляОтладки.Текст;

	ПараметрыЗапросаСтруктура = ДанныеДляОтладки.Параметры;

	Для Каждого ПараметрЗапроса Из ПараметрыЗапросаСтруктура Цикл

		ТипПараметра=ТипЗнч(ПараметрЗапроса.Значение);
		НовыйПараметр = НовыйЗапрос.Параметры.Добавить();
		НовыйПараметр.Имя = ПараметрЗапроса.Ключ;

		Если ТипПараметра = Тип("ТаблицаЗначений") Тогда
			НовыйПараметр.ЭтоСпецЗначение = Истина;
			НовыйПараметр.Значение = "ТаблицаЗначений";
			НовыйПараметр.ТипЗначения = "ТаблицаЗначений";
			НовыйПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение);
		ИначеЕсли ТипПараметра = Тип("УникальныйИдентификатор") Тогда
			НовыйПараметр.ЭтоСпецЗначение = Истина;
			НовыйПараметр.Значение = Строка(ПараметрЗапроса.Значение);
			НовыйПараметр.ТипЗначения = "УникальныйИдентификатор";
			НовыйПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение);
		Иначе
			НовыйПараметр.ЭтоСпецЗначение = Ложь;
			НовыйПараметр.Значение = ПараметрЗапроса.Значение;
			НовыйПараметр.СпецЗначение = "";
		КонецЕсли;
	КонецЦикла;

	ИдентификаторСозданнойСтроки=НовыйЗапрос.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьИмяОбработки()
	Возврат "УИ_КонсольЗапросов";
КонецФункции

&НаКлиенте
Процедура вЗагрузитьНастройкиОбработки()

	Если ЗначениеЗаполнено(АдресДанныхОтладки) И ЭтоАдресВременногоХранилища(АдресДанныхОтладки) Тогда
		ИдСтроки=Неопределено;
		ЗаполнитьЗапросДляОтладки(вКореньДереваЗапросов().ПолучитьИдентификатор(), ИдСтроки);
		Элементы._ДеревоЗапросов.ТекущаяСтрока=ИдСтроки;
	ИначеЕсли ПустаяСтрока(_ПутьКФайлуЗапросов) Тогда
		вЗагрузитьНастройкиПоСтарому();
	КонецЕсли;

	Попытка
		Если Не ПустаяСтрока(_ПутьКФайлуЗапросов) И вФайлСуществует(_ПутьКФайлуЗапросов) Тогда
			вЗагрузитьЗапросыИзФайла(вСоздатьМассив(_ПутьКФайлуЗапросов));
		КонецЕсли;

		Если Не ПустаяСтрока(_ПутьКФайлуАлгоритмов) И вФайлСуществует(_ПутьКФайлуАлгоритмов) Тогда
			вЗагрузитьАлгоритмыИзФайла(вСоздатьМассив(_ПутьКФайлуАлгоритмов));
		КонецЕсли;

		вСформироватьЗаголовокКлиент();
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказыватьФайлЗапросовВЗаголовкеПриИзменении(Элемент)
	вСформироватьЗаголовокКлиент();
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуЗапросовПриИзменении(Элемент)
	_ПеречитатьФайлЗапросов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуЗапросовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	_ЗагрузитьФайлЗапросов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуАлгоритмовПриИзменении(Элемент)
	_ПеречитатьФайлАлгоритмов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКФайлуАлгоритмовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	_ЗагрузитьФайлАлгоритмов(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПеречитатьФайлЗапросов(Команда)
	вОчиститьДеревоЗапросов();
	Если Не ПустаяСтрока(_ПутьКФайлуЗапросов) И вФайлСуществует(_ПутьКФайлуЗапросов) Тогда
		вЗагрузитьЗапросыИзФайла(вСоздатьМассив(_ПутьКФайлуЗапросов));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПеречитатьФайлАлгоритмов(Команда)
	вОчиститьДеревоАлгоритмов();
	Если Не ПустаяСтрока(_ПутьКФайлуАлгоритмов) И вФайлСуществует(_ПутьКФайлуАлгоритмов) Тогда
		вЗагрузитьАлгоритмыИзФайла(вСоздатьМассив(_ПутьКФайлуАлгоритмов));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗагрузитьНастройкиПоСтарому()
	СтрукНастройкиПоУмолчанию = Новый Структура;
	СтрукНастройкиПоУмолчанию.Вставить("_ПутьКФайлуЗапросов", "");
	СтрукНастройкиПоУмолчанию.Вставить("_ПутьКФайлуАлгоритмов", "");

	СтрукНастройки = ХранилищеОбщихНастроек.Загрузить(вПолучитьИмяОбработки());
	Если ТипЗнч(СтрукНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрукНастройкиПоУмолчанию, СтрукНастройки);
		Попытка
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрукНастройкиПоУмолчанию);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область РаботаСЗапросами

&НаКлиенте
Функция вКореньДереваЗапросов()
	Возврат _ДеревоЗапросов.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция вСЗапросомРаботатьНельзя()
	Возврат Элементы._ТекстЗапроса.ТолькоПросмотр;
КонецФункции
#Область СохранениеЗагрузка

&НаКлиенте
Процедура вОчиститьДеревоЗапросов()
	_ДеревоЗапросов.ПолучитьЭлементы().Очистить();

	НС = _ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НС.Имя = "Запросы";
	НС.Текст = "// КОРНЕВОЙ ЗАПРОС НЕ ИСПОЛЬЗУЕТСЯ //";

	НСЗапроса=НС.ПолучитьЭлементы().Добавить();
	НСЗапроса.Имя="Запрос";

	Элементы._ДеревоЗапросов.ТекущаяСтрока=НСЗапроса.ПолучитьИдентификатор();

	вЗапросыИзменены(Ложь);
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаЗапросов(Открытие = Истина, ПутьКФайлу = "")
	пСтрук = вРазобратьПутьКФайлу(ПутьКФайлу);

	Диалог = Новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Каталог = пСтрук.Каталог;
	Диалог.ПолноеИмяФайла = пСтрук.Имя;
	Диалог.Заголовок  = "Файл запросов";
	Диалог.Фильтр     = "Файлы запросов (*.jsel)|*.jsel|Старый формат запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	Диалог.Расширение = "jsel";

	Возврат Диалог;
КонецФункции

&НаСервере
Функция СериализованныеДанныеЗапросовДляЗаписиВФайл()
	СериализаторJSON=Обработки.УИ_ПреобразованиеДанныхJSON.Создать();

	ДанныеЗапросов=Новый Структура;
	ДанныеЗапросов.Вставить("ВерсияФормата", "1.0");
	ДанныеЗапросов.Вставить("ДатаСоздания", ТекущаяДата());
	ДанныеЗапросов.Вставить("Автор", ИмяПользователя());

	Дерево=РеквизитФормыВЗначение("_ДеревоЗапросов");
	ДанныеЗапросов.Вставить("Запросы", СериализаторJSON.ЗначениеВСтруктуру(Дерево));

	Возврат СериализаторJSON.ЗаписатьОписаниеОбъектаВJSON(ДанныеЗапросов);
КонецФункции

&НаКлиенте
Процедура вСохранитьЗапросыВФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда

		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуЗапросов = ВыбранныеФайлы[0];
			вСформироватьЗаголовокКлиент();
			СтрокиДЗ = вКореньДереваЗапросов().ПолучитьЭлементы();
		Иначе
			СтрокиДЗ = вСоздатьМассив(ДопПараметры);
		КонецЕсли;

		Попытка
//			Струк = Новый Структура;
//			вПреобразоватьЦепочкуЗапросовВСтруктуру(Истина, Струк, СтрокиДЗ);
//			СтрокаДанных = вЗначениеВСтрокуВнутр(Струк);
			СтрокаДанных=СериализованныеДанныеЗапросовДляЗаписиВФайл();

			ТДок = Новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаДанных);

			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЗапись(Новый ОписаниеОповещения("вСохранитьЗапросыВФайлДалее", ЭтаФорма), ВыбранныеФайлы[0]);
				Возврат;
			Иначе
				ТДок.Записать(ВыбранныеФайлы[0]);
			КонецЕсли;

			вЗапросыИзменены(Ложь);
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьЗапросыВФайлДалее(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Истина Тогда
		вЗапросыИзменены(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЗапросыИзФайла(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		СтрукДалее = Новый Структура("ТДок, УзелДЗ, ПутьКФайлуЗапросов");

		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуЗапросов = "";
			вСформироватьЗаголовокКлиент();
			вОчиститьДеревоЗапросов();
			УзелДЗ = вКореньДереваЗапросов();

			СтрукДалее.ПутьКФайлуЗапросов = ВыбранныеФайлы[0];
		Иначе
			УзелДЗ = ДопПараметры;
		КонецЕсли;

		СтрукДалее.УзелДЗ = УзелДЗ;

		Попытка
			ТДок = Новый ТекстовыйДокумент;

			СтрукДалее.ТДок = ТДок;

			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЧтение(Новый ОписаниеОповещения("вЗагрузитьЗапросыИзФайлаДалее", ЭтаФорма, СтрукДалее),
					ВыбранныеФайлы[0]);
			Иначе
				ТДок.Прочитать(ВыбранныеФайлы[0]);
				вЗагрузитьЗапросыИзФайлаДалее(СтрукДалее);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиДереваИзФайлаНаФорму(ЭлементыДереваФормы, СтрокиДереваФайла, СоответствиеКолонокФорматов,
	СоответствиеКолонокПараметров)
	Для Каждого СтрокаВремТаблицы Из СтрокиДереваФайла Цикл
		НовСтрока = ЭлементыДереваФормы.Добавить();
		Для Каждого КлючЗначение Из СоответствиеКолонокФорматов Цикл
			НовСтрока[КлючЗначение.Значение]=СтрокаВремТаблицы[КлючЗначение.Ключ];
		КонецЦикла;

		Если ТипЗнч(СтрокаВремТаблицы.ПараметрыЗапроса) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрПараметра Из СтрокаВремТаблицы.ПараметрыЗапроса Цикл
				НовыйПараметр =НовСтрока.Параметры.Добавить();
				Для Каждого КлючЗначение Из СоответствиеКолонокПараметров Цикл
					НовыйПараметр[КлючЗначение.Значение]=СтрПараметра[КлючЗначение.Ключ];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

		Если ТипЗнч(СтрокаВремТаблицы) = Тип("СтрокаДереваЗначений") Тогда
			СкопироватьСтрокиДереваИзФайлаНаФорму(НовСтрока.ПолучитьЭлементы(), СтрокаВремТаблицы.Строки,
				СоответствиеКолонокФорматов, СоответствиеКолонокПараметров);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДереваЗапросаНаСервере(СтрокаДанных)
	СериализаторJSON=Обработки.УИ_ПреобразованиеДанныхJSON.Создать();

	Попытка
		Попытка
			ДанныеЗапросов = вЗначениеИзСтрокиВнутр(СтрокаДанных);
		Исключение
			Попытка
				ДанныеЗапросов=СериализаторJSON.ПрочитатьОписаниеОбъектаИзJSON(СтрокаДанных);

			Исключение
				вСообщитьОбОшибке("Неверный формат файла запросов!");

				Возврат;
			КонецПопытки;
		КонецПопытки;

		Если ТипЗнч(ДанныеЗапросов) = Тип("ДеревоЗначений") Или ТипЗнч(ДанныеЗапросов) = Тип("ТаблицаЗначений") Тогда
			КореньДерева=_ДеревоЗапросов.ПолучитьЭлементы()[0];
			ЭлементыКорня=КореньДерева.ПолучитьЭлементы();
			ЭлементыКорня.Очистить();

			СоответствиеКолонокФорматов=Новый Соответствие;
			СоответствиеКолонокФорматов.Вставить("Запрос", "Имя");
			СоответствиеКолонокФорматов.Вставить("ТекстЗапроса", "Текст");

			СоответствиеКолонокПараметров=Новый Соответствие;
			СоответствиеКолонокПараметров.Вставить("ИмяПараметра", "Имя");
			СоответствиеКолонокПараметров.Вставить("ЗначениеПараметра", "Значение");

						
			//Формат старой консоли
			Если ТипЗнч(ДанныеЗапросов) = Тип("ТаблицаЗначений") Тогда
				СкопироватьСтрокиДереваИзФайлаНаФорму(ЭлементыКорня, ДанныеЗапросов, СоответствиеКолонокФорматов,
					СоответствиеКолонокПараметров);

			ИначеЕсли ТипЗнч(ДанныеЗапросов) = Тип("ДеревоЗначений") Тогда
				СкопироватьСтрокиДереваИзФайлаНаФорму(ЭлементыКорня, ДанныеЗапросов.Строки,
					СоответствиеКолонокФорматов, СоответствиеКолонокПараметров);
			КонецЕсли;

		ИначеЕсли ТипЗнч(ДанныеЗапросов) = Тип("Структура") Тогда
			Дерево=СериализаторJSON.ЗначениеИзСтруктуры(ДанныеЗапросов.Запросы);
			ЗначениеВРеквизитФормы(Дерево, "_ДеревоЗапросов");
		Иначе
			вСообщитьОбОшибке("Неверный формат файла запросов!");
			Возврат;

		КонецЕсли;

	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЗапросыИзФайлаДалее(ДопПараметры) Экспорт
	ТДок = ДопПараметры.ТДок;
	ЗагрузитьДанныеДереваЗапросаНаСервере(ТДок.ПолучитьТекст());

	УзелДЗ=вКореньДереваЗапросов();
	Элементы._ДеревоЗапросов.Развернуть(УзелДЗ.ПолучитьИдентификатор(), Ложь);

	Если ДопПараметры.ПутьКФайлуЗапросов <> Неопределено Тогда
		_ПутьКФайлуЗапросов = ДопПараметры.ПутьКФайлуЗапросов;
		вСформироватьЗаголовокКлиент();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _ЗагрузитьФайлЗапросов(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаЗапросов(Истина, _ПутьКФайлуЗапросов);
	Диалог.Показать(Новый ОписаниеОповещения("вЗагрузитьЗапросыИзФайла", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьДеревоЗапросов(Команда)
	_ПутьКФайлуЗапросов = "";
	вСформироватьЗаголовокКлиент();
	вОчиститьДеревоЗапросов();
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлЗапросов(Команда)
	Если Не ЗначениеЗаполнено(_ПутьКФайлуЗапросов) Тогда
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(Ложь);
		Диалог.Показать(Новый ОписаниеОповещения("вСохранитьЗапросыВФайл", ЭтаФорма));
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(_ПутьКФайлуЗапросов);
		вСохранитьЗапросыВФайл(Массив, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлЗапросовКак(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаЗапросов(Ложь, _ПутьКФайлуЗапросов);
	Диалог.Показать(Новый ОписаниеОповещения("вСохранитьЗапросыВФайл", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьЗапросВФайл(Команда)
	ТекДанные = Элементы._ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(Ложь);
		Диалог.Показать(Новый ОписаниеОповещения("вСохранитьЗапросыВФайл", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПодгрузитьЗапросИзФайла(Команда)
	ТекДанные = Элементы._ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаЗапросов(Истина);
		Диалог.Показать(Новый ОписаниеОповещения("вЗагрузитьЗапросыИзФайла", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытий

&НаКлиенте
Процедура вУстановитьДоступностьРедактированияЗапроса(ТолькоПросмотр)
	Элементы._ДеревоЗапросовИмя.ТолькоПросмотр = ТолькоПросмотр;
	Элементы._ТекстЗапроса.ТолькоПросмотр = ТолькоПросмотр;
	Элементы._ОписаниеЗапроса.ТолькоПросмотр = ТолькоПросмотр;
	
	//Элементы._СпособВыгрузки.ТолькоПросмотр = истина; //!!! пока не реализовано
	
//	ВАЖНО: если изменить свойство, то форма дергается
//	Элементы._ПараметрыЗапроса.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура вСкопироватьСтрокуДереваЗапросов(Приемник, Источник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Параметры");

	Приемник.Параметры.Очистить();
	Для Каждого Стр Из Источник.Параметры Цикл
		НС = Приемник.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		Если ТипЗнч(НС.Значение) = Тип("СписокЗначений") Тогда
			НС.Значение = НС.Значение.Скопировать();
		КонецЕсли;
	КонецЦикла;

	ДочерниеЭлементыИсточника = Источник.ПолучитьЭлементы();
	ДочерниеЭлементыПриемника = Приемник.ПолучитьЭлементы();
	Для Каждого СтрДЗ Из ДочерниеЭлементыИсточника Цикл
		;
		НС = ДочерниеЭлементыПриемника.Добавить();
		вСкопироватьСтрокуДереваЗапросов(НС, СтрДЗ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вПереподчинитьЗапрос(СтрДЗ, НоваяСемья)
	вСкопироватьСтрокуДереваЗапросов(НоваяСемья.Добавить(), СтрДЗ);
КонецПроцедуры

&НаКлиенте
Процедура вВосстановитьДанныеЗапроса()
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			_ТекстЗапроса.УстановитьТекст(ТекДанные.Текст);
			_ОписаниеЗапроса.УстановитьТекст(ТекДанные.Комментарий);
			_СпособВыгрузки = ТекДанные.СпособВыгрузки;

			_ПараметрыЗапроса.Очистить();
			Для Каждого Стр Из ТекДанные.Параметры Цикл
				ЗаполнитьЗначенияСвойств(_ПараметрыЗапроса.Добавить(), Стр);
			КонецЦикла;
		Иначе
			мТекСтрокаДереваЗапросов = -1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьДанныеЗапроса(Имя)
	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			Если Имя = "Текст" Тогда
				ТекДанные.Текст = _ТекстЗапроса.ПолучитьТекст();
			ИначеЕсли Имя = "Комментарий" Тогда
				ТекДанные.Комментарий = _ОписаниеЗапроса.ПолучитьТекст();
			ИначеЕсли Имя = "Параметры" Тогда
				ТекДанные.Параметры.Очистить();
				Для Каждого Стр Из _ПараметрыЗапроса Цикл
					ЗаполнитьЗначенияСвойств(ТекДанные.Параметры.Добавить(), Стр);
				КонецЦикла;
			ИначеЕсли Имя = "СпособВыгрузки" Тогда
				ТекДанные.СпособВыгрузки = _СпособВыгрузки;
			КонецЕсли;
		Иначе
			мТекСтрокаДереваЗапросов = -1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ТекстЗапросаПриИзменении(Элемент)
	вСохранитьДанныеЗапроса("Текст");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОписаниеЗапросаПриИзменении(Элемент)
	вСохранитьДанныеЗапроса("Комментарий");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _СпособВыгрузкиПриИзменении(Элемент)
	вСохранитьДанныеЗапроса("СпособВыгрузки");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаПриИзменении(Элемент)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	вСохранитьДанныеЗапроса("Параметры");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;

	Если ТекДанные <> Неопределено Тогда
		ТекДанные.ЭтоСпецЗначение = Ложь;
		ТекДанные.СпецЗначение = "";
		ТекДанные.ТипЗначения = "";
		ТекДанные.Значение = Неопределено;
	КонецЕсли;

	Элемент.ВыбиратьТип  = Истина;
	Элемент.КнопкаВыбора = Истина;
	Элемент.ОграничениеТипа = Новый ОписаниеТипов;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пЗначение = Элементы._ПараметрыЗапроса.ТекущиеДанные.Значение;

	Если пЗначение = Неопределено Тогда
		Если Не _ИспользоватьСтандартныйСпособВыбораТипаПараметра Тогда
			СтандартнаяОбработка = Ложь;
			СтрукПарам = Новый Структура("ЗакрыватьПриЗакрытииВладельца, ТипыДляКонсолиЗапросов", Истина, Истина);
			ОткрытьФорму("ОбщаяФорма.УИ_ФормаВыбораТипаОбъекта", СтрукПарам, Элемент, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		вУстановитьОграничениеТипаНаПараметрЗапроса(пЗначение);

		Если ТипЗнч(пЗначение) = Тип("СписокЗначений") Тогда
			Возврат;
		КонецЕсли;

		Если _ИспользоватьНеСтандартнуюФормуДляВыбора Тогда
			пПолноеИмя = вПолучитьПолноеИмяМД(пЗначение);
			Если пПолноеИмя <> Неопределено Тогда
				СтандартнаяОбработка = Ложь;
				СтрукПараметры = Новый Структура("ПутьКФормам, ПолноеИмя", _ПутьКФормам, пПолноеИмя);
				СтрукПараметры.Вставить("РежимВыбора", Истина);
				Попытка
					ОткрытьФорму(_ПутьКФормам + "ФормаСпискаОбъектов", СтрукПараметры, Элемент, Истина, , , ,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Исключение
					СтандартнаяОбработка = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если вСЗапросомРаботатьНельзя() Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыЗапросаПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;

	Если Элемент.ТекущийЭлемент = Элементы._ПараметрыЗапросаЗначение Тогда
		Если ТекДанные.ЭтоСпецЗначение Тогда
			Если ТекДанные.ТипЗначения = "УникальныйИдентификатор" Тогда
				// можно редактировать
			ИначеЕсли ТекДанные.ТипЗначения = "Выражение" Тогда
				// можно редактировать
			Иначе
				Отказ = Истина;
				_ОткрытьСпецЗначениеПараметра(Неопределено);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		вУстановитьОграничениеТипаНаПараметрЗапроса(ТекДанные.Значение);

		Если ТекДанные.Значение = Неопределено Тогда
			Элемент.ТекущийЭлемент.ВыбиратьТип = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ВыбиратьТип = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовИмяПриИзменении(Элемент)
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПриИзменении(Элемент)
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		вПоказатьПредупреждение("Нельзя удалить корневой элемент дерева!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
	ТекущаяСтрокаДерева=Элемент.ТекущиеДанные;
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Копирование Тогда
		РодительТекущейСроки=ТекущаяСтрокаДерева.ПолучитьРодителя();
		Если РодительТекущейСроки = Неопределено Тогда
			вПоказатьПредупреждение("Нельзя скопировать корневой элемент дерева!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ЭлементыТекущейСтроки=РодительТекущейСроки.ПолучитьЭлементы();

	Иначе
		ЭлементыТекущейСтроки=ТекущаяСтрокаДерева.ПолучитьЭлементы();
	КонецЕсли;
	НоваяСтрока=ЭлементыТекущейСтроки.Добавить();

	Если Копирование Тогда
		мИсточникКопирования = -1;
		Если ТекущаяСтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
			вПоказатьПредупреждение("Нельзя скопировать корневой элемент дерева!");
			Отказ = Истина;
		Иначе
			мИсточникКопирования = ТекущаяСтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;

		вСкопироватьСтрокуДереваЗапросов(НоваяСтрока, ТекущаяСтрокаДерева);
		вВосстановитьДанныеЗапроса();

	КонецЕсли;
	НоваяСтрока.Имя="Запрос" + НоваяСтрока.ПолучитьИдентификатор();

	Элемент.ТекущаяСтрока=НоваяСтрока.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("вПриАктивизацииСтрокиДереваЗапросов", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура вПриАктивизацииСтрокиДереваЗапросов() Экспорт
	Элемент = Элементы._ДеревоЗапросов;

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Инд = ТекДанные.ПолучитьИдентификатор();
		Если Инд <> мТекСтрокаДереваЗапросов Тогда
			мТекСтрокаДереваЗапросов = Инд;
			вВосстановитьДанныеЗапроса();
			вУстановитьДоступностьРедактированияЗапроса(ТекДанные = вКореньДереваЗапросов());
		КонецЕсли;
	Иначе
		мТекСтрокаДереваЗапросов = -1;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _ДеревоЗапросовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Копирование Тогда
		Если мИсточникКопирования <> -1 Тогда
			ДанныеИсточник = _ДеревоЗапросов.НайтиПоИдентификатору(мИсточникКопирования);
			Если ДанныеИсточник <> Неопределено Тогда
				вСкопироватьСтрокуДереваЗапросов(ТекДанные, ДанныеИсточник);
				вВосстановитьДанныеЗапроса();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	мИсточникПеретаскивания = "Запросы";
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если мИсточникПеретаскивания <> "Запросы" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;

	Если мИсточникПеретаскивания = "Запросы" И Строка <> Неопределено И мСтрокаПеретаскивания <> Неопределено Тогда
		НовыйРодитель = _ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		Если НовыйРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Потомок = мСтрокаПеретаскивания;
		ПрежнийРодитель = Потомок.ПолучитьРодителя();
		Если ПрежнийРодитель <> Неопределено И Строка <> ПрежнийРодитель.ПолучитьИдентификатор() Тогда
			Если Не вПотомокПроисходитОтПредка(Потомок, НовыйРодитель) Тогда
				вПереподчинитьЗапрос(Потомок, НовыйРодитель.ПолучитьЭлементы());
				ПрежняяСемья = ПрежнийРодитель.ПолучитьЭлементы();
				ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Потомок));
				вЗапросыИзменены(Истина);
			Иначе
				вПоказатьПредупреждение("Зацикливание подчиненности - переподчинение невозможно!");
			КонецЕсли;
		КонецЕсли;
		мСтрокаПеретаскивания = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ОсновнаяРабота

&НаКлиенте
Процедура _СохранитьПараметрыЗапроса(Команда)
	_БуферПараметровЗапроса.Очистить();

	Для Каждого Стр Из Элементы._ПараметрыЗапроса.ВыделенныеСтроки Цикл
		ТекДанные = _ПараметрыЗапроса.НайтиПоИдентификатору(Стр);
		Если ТекДанные <> Неопределено Тогда
			НС = _БуферПараметровЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
			Если ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") Тогда
				НС.Значение = ТекДанные.Значение.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ВосстановитьПараметрыЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Стр Из _БуферПараметровЗапроса Цикл
		НС = _ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
	КонецЦикла;
	вСохранитьДанныеЗапроса("Параметры");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьСпецЗначениеПараметра(Команда)
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ЭтоСпецЗначение Тогда
		Если ТекДанные.ТипЗначения = "ТаблицаЗначений" Тогда
			СтрукПарам = Новый Структура("ЗначениеВнутр, Заголовок", ТекДанные.СпецЗначение, "Параметр запроса: "
				+ ТекДанные.Имя);
			ОткрытьФорму("ОбщаяФорма.УИ_ФормаТаблицыЗначений", СтрукПарам, ЭтаФорма, , , ,
				Новый ОписаниеОповещения("вПослеЗакрытияФормыРедактированияСпецПараметра", ЭтаФорма),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			СтрукПарам = Новый Структура("ЗначениеВнутр, Заголовок", ТекДанные.СпецЗначение, "Параметр запроса: "
				+ ТекДанные.Имя);
			ОткрытьФорму("ОбщаяФорма.УИ_ФормаСпецЗначения", СтрукПарам, ЭтаФорма, , , ,
				Новый ОписаниеОповещения("вПослеЗакрытияФормыРедактированияСпецПараметра", ЭтаФорма),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПараметрЗапросаВНовыйТип(пОперация)
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ЭтоСпецЗначение И ТекДанные.ТипЗначения = "ТаблицаЗначений" Тогда
			Возврат;
		КонецЕсли;

		пСтрук = Новый Структура("ЭтоСпецЗначение,Значение, ТипЗначения, СпецЗначение");
		ЗаполнитьЗначенияСвойств(пСтрук, ТекДанные);

		пРезультат = вПреобразоватьЗначениеПараметраЗапроса(пОперация, пСтрук);
		Если Не пРезультат.Отказ Тогда
			ЗаполнитьЗначенияСвойств(ТекДанные, пРезультат.Данные);
		КонецЕсли;

		вСохранитьДанныеЗапроса("Параметры");
		вЗапросыИзменены(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВГраницу(Команда)
	вПараметрЗапросаВНовыйТип("Граница");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВМоментВремени(Команда)
	вПараметрЗапросаВНовыйТип("МоментВремени");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВУникальныйИдентификатор(Команда)
	вПараметрЗапросаВНовыйТип("УникальныйИдентификатор");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВВыражение(Команда)
	вПараметрЗапросаВНовыйТип("Выражение");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрЗапросаВБитуюСсылку(Команда)
	Элементы._ПараметрыЗапроса.ДобавитьСтроку();
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("вОбработатьВводСтроки_ОбъектНеНайден", ЭтаФорма), ,
			"Введите битую ссылку: <Объект не найден> ... ", , Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВводСтроки_ОбъектНеНайден(Строка, ДопПарам = Неопределено) Экспорт
	пУдалитьСтроку = Истина;

	Если Строка <> Неопределено И Не ПустаяСтрока(Строка) Тогда
		пСтрук = вПолучитьСсылкуНаУдаленныйОбъект(Строка);
		Если Не пСтрук.Отказ Тогда
			ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекДанные.Значение = пСтрук.Ссылка;
				пУдалитьСтроку = Ложь;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(пСтрук.ПричинаОтказа) Тогда
			Сообщить(пСтрук.ПричинаОтказа);
		КонецЕсли;
	КонецЕсли;

	Если пУдалитьСтроку Тогда
		ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			_ПараметрыЗапроса.Удалить(ТекДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСсылкуНаУдаленныйОбъект(Знач пСтрокаОбъектНеНайден)
	пРезультат = Новый Структура("Отказ, ПричинаОтказа, Ссылка", Истина, "");
	пРезультат.ПричинаОтказа = "Неправильный формат строки!";

	Если ПустаяСтрока(пСтрокаОбъектНеНайден) Тогда
		пСтрокаОбъектНеНайден = "<Объект не найден> (769:b1390050568b35ac11e6e46fdd2c3861)";
	КонецЕсли;

	пСтрокаОбъектНеНайден = Сред(пСтрокаОбъектНеНайден, СтрНайти(пСтрокаОбъектНеНайден, "(") + 1);
	пСтрокаОбъектНеНайден = СтрЗаменить(пСтрокаОбъектНеНайден, ")", "");
	пСтрокаОбъектНеНайден = СокрЛП(пСтрокаОбъектНеНайден);

	Поз = СтрНайти(пСтрокаОбъектНеНайден, ":");

	пТип = Лев(пСтрокаОбъектНеНайден, Поз - 1);
	пСтрока = Сред(пСтрокаОбъектНеНайден, Поз + 1);

	Попытка
		пUUID = Сред(пСтрока, 25, 8) + "-" + Сред(пСтрока, 21, 4) + "-" + Сред(пСтрока, 17, 4) + "-" + Сред(пСтрока, 1,
			4) + "-" + Сред(пСтрока, 5, 12);
		пUUID = Новый УникальныйИдентификатор(пUUID);

		пСтрукОбъектыМД = Новый Структура("ПланыОбмена, Справочники, Документы, ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыСчетов, БизнесПроцессы, Задачи");

		Для Каждого пРаздел Из пСтрукОбъектыМД Цикл
			Для Каждого Элем Из Метаданные[пРаздел.Ключ] Цикл
				пМенеджер = Вычислить(пРаздел.Ключ + "[Элем.Имя]");
				пСтрока = ЗначениеВСтрокуВнутр(пМенеджер.ПустаяСсылка());
				Поз1 = СтрНайти(пСтрока, ",", НаправлениеПоиска.СКонца);
				Поз2 = СтрНайти(пСтрока, ":");

				Если Сред(пСтрока, Поз1 + 1, Поз2 - Поз1 - 1) = пТип Тогда
					пРезультат.Ссылка = пМенеджер.ПолучитьСсылку(пUUID);
					пРезультат.Отказ = Ложь;

					Возврат пРезультат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		пРезультат.ПричинаОтказа = пРезультат.ПричинаОтказа + Символы.ПС + КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
		Возврат пРезультат;
	КонецПопытки;

	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПреобразоватьЗначениеПараметраЗапроса(Знач пОперация, Знач пСтрукДанные)
	пРезультат = Новый Структура("Отказ, Данные", Ложь, пСтрукДанные);

	Если пСтрукДанные.ЭтоСпецЗначение И пСтрукДанные.ТипЗначения <> пОперация Тогда
		пРезультат.Отказ = Истина;
		Возврат пРезультат
	КонецЕсли
	;

	Попытка
		Если пОперация = "Граница" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пЗначение = ЗначениеИзСтрокиВнутр(пСтрукДанные.СпецЗначение);
				пСтрукДанные.ЭтоСпецЗначение = Ложь;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "";
				пСтрукДанные.Значение = пЗначение.Значение;
			Иначе
				пЗначение = Новый Граница(пСтрукДанные.Значение);
				пСтрукДанные.ЭтоСпецЗначение = Истина;
				пСтрукДанные.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
				пСтрукДанные.ТипЗначения = "Граница";
				пСтрукДанные.Значение = Строка(пЗначение.Значение) + ";" + Строка(пЗначение.ВидГраницы);
			КонецЕсли;

		ИначеЕсли пОперация = "МоментВремени" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пЗначение = ЗначениеИзСтрокиВнутр(пСтрукДанные.СпецЗначение);
				пСтрукДанные.ЭтоСпецЗначение = Ложь;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "";
				пСтрукДанные.Значение = ?(пЗначение.Ссылка <> Неопределено, пЗначение.Ссылка, пЗначение.Дата);
			Иначе
				Если ТипЗнч(пСтрукДанные.Значение) = Тип("Дата") Тогда
					пЗначение = Новый МоментВремени(пСтрукДанные.Значение);
				Иначе
					пЗначение = Новый МоментВремени(ТекущаяДата(), пСтрукДанные.Значение);
				КонецЕсли;
				пСтрукДанные.ЭтоСпецЗначение = Истина;
				пСтрукДанные.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
				пСтрукДанные.ТипЗначения = "МоментВремени";
				пСтрукДанные.Значение = Строка(пЗначение);
			КонецЕсли;

		ИначеЕсли пОперация = "Выражение" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пСтрукДанные.ЭтоСпецЗначение = Ложь;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "";
				пСтрукДанные.Значение = "";
			Иначе
				пСтрукДанные.ЭтоСпецЗначение = Истина;
				пСтрукДанные.СпецЗначение = "";
				пСтрукДанные.ТипЗначения = "Выражение";
				пСтрукДанные.Значение = "";
			КонецЕсли;

		ИначеЕсли пОперация = "УникальныйИдентификатор" Тогда
			Если пСтрукДанные.ЭтоСпецЗначение Тогда
				пРезультат.Отказ = Истина;
			Иначе
				Попытка
					пЗначение = пСтрукДанные.Значение.УникальныйИдентификатор();
				Исключение
					пЗначение = вПолучитьПустойУникальныйИдентификатор();
				КонецПопытки;

				пСтрукДанные.ЭтоСпецЗначение = Истина;
				пСтрукДанные.СпецЗначение = ЗначениеВСтрокуВнутр(пЗначение);
				пСтрукДанные.ТипЗначения = "УникальныйИдентификатор";
				пСтрукДанные.Значение = Строка(пЗначение);
			КонецЕсли;

		Иначе
			пРезультат.Отказ = Истина;
		КонецЕсли;

	Исключение
		пРезультат.Отказ = Истина;
	КонецПопытки;

	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _ПараметрЗапросаВСписокЗначений(Команда)
	ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные <> Неопределено И Не ТекДанные.ЭтоСпецЗначение Тогда

		Если ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") Тогда
			Если ТекДанные.Значение.Количество() <> 0 Тогда
				вПоказатьВопрос("вПараметрЗапросаИзСпискаЗначений",
					"В параметр будет помещено первое значение из списка значений. Продолжить?");
				Возврат;
			Иначе
				ТекДанные.Значение = Неопределено;
				вУстановитьОграничениеТипаНаПараметрЗапроса(Неопределено);
				вСохранитьДанныеЗапроса("Параметры");
				вЗапросыИзменены(Истина);
				Возврат;
			КонецЕсли;
		Иначе
			Значение = ТекДанные.Значение;
			пСписок = Новый СписокЗначений;
			пСписок.Добавить(Значение);
			ТекДанные.Значение = пСписок;
			вУстановитьОграничениеТипаНаПараметрЗапроса(пСписок);

			вСохранитьДанныеЗапроса("Параметры");
			вЗапросыИзменены(Истина);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПараметрЗапросаИзСпискаЗначений(РезультатВопроса, пДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
		Если ТекДанные <> Неопределено И Не ТекДанные.ЭтоСпецЗначение Тогда
			Если ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") И ТекДанные.Значение.Количество() <> 0 Тогда
				ТекДанные.Значение = ТекДанные.Значение[0].Значение;
				вУстановитьОграничениеТипаНаПараметрЗапроса(ТекДанные.Значение);

				вСохранитьДанныеЗапроса("Параметры");
				вЗапросыИзменены(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьОграничениеТипаНаПараметрЗапроса(Знач Значение)
	ЭФ = Элементы._ПараметрыЗапросаЗначение;
	Если Значение = Неопределено Тогда
		ЭФ.ОграничениеТипа = Новый ОписаниеТипов;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(Значение));
		ЭФ.ОграничениеТипа = Новый ОписаниеТипов(Массив);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура вПослеЗакрытияФормыРедактированияСпецПараметра(РезультатЗакрытия, ДопПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ТекДанные = Элементы._ПараметрыЗапроса.ТекущиеДанные;
		Если ТекДанные <> Неопределено И ТекДанные.ЭтоСпецЗначение Тогда
			пПредставление = Неопределено;

			ТекДанные.СпецЗначение = РезультатЗакрытия.СтрокаВнутр;

			Если РезультатЗакрытия.Свойство("Представление", пПредставление) Тогда
				ТекДанные.Значение = пПредставление;
			КонецЕсли;

			вСохранитьДанныеЗапроса("Параметры");
			вЗапросыИзменены(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьТекстЗапроса(ДляВыполнения = Ложь)
	ПризнакОстанова = "1001 КАК __ВОЗВРАТ__";

	Результат = Элементы._ТекстЗапроса.ВыделенныйТекст;
	Если ПустаяСтрока(Результат) Тогда
		Результат = _ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

	Если ДляВыполнения И Не ПустаяСтрока(Результат) И СтрНайти(Результат, ПризнакОстанова) <> 0 Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Результат);

		ЧислоСимволов = 0;
		Результат = "";

		Для Сч = 1 По Текст.КоличествоСтрок() Цикл
			Стр = Текст.ПолучитьСтроку(Сч);
			Если СтрНайти(Стр, ПризнакОстанова) <> 0 Тогда
				Если СтрНайти(Стр, "ВЫБРАТЬ") = 0 Тогда
					Результат = Лев(Результат, СтрДлина(Результат) - ЧислоСимволов);
				КонецЕсли;
				Прервать;
			КонецЕсли;

			ЧислоСимволов = СтрДлина(Стр);

			Если Сч = 1 Тогда
				Результат = Стр;
			Иначе
				Результат = Результат + Символы.ПС + Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СокрЛП(Результат);
КонецФункции

&НаКлиенте
Процедура вОбработатьЗакрытиеКонструктораЗапроса(ТекстЗапроса, ДопПараметры = Неопределено) Экспорт
	Если ТекстЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	вСохранитьДанныеЗапроса("Текст");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьКонструкторЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = _ТекстЗапроса.ПолучитьТекст();
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		Конструктор = Новый КонструкторЗапроса(ТекстЗапроса);
	Иначе
		Конструктор = Новый КонструкторЗапроса;
	КонецЕсли;

#Если ТолстыйКлиентУправляемоеПриложение Или ВнешнееСоединение Тогда
	Если Не _ДиалогиЗапрещены Тогда
		Попытка
			вОбработатьЗакрытиеКонструктораЗапроса(?(Конструктор.ОткрытьМодально(), Конструктор.Текст, Неопределено));
			Возврат;
		Исключение
		КонецПопытки;
	КонецЕсли;
#КонецЕсли

	Конструктор.Показать(Новый ОписаниеОповещения("вОбработатьЗакрытиеКонструктораЗапроса", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _ЗаполнитьПараметрыЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(Истина);

			Попытка
				Коллекция = вПолучитьПараметрыПоТекстуЗапроса(ТекстЗапроса);
			Исключение
				вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;

			Если ТипЗнч(Коллекция) = Тип("Массив") Тогда
				Для Каждого ПараметрЗапроса Из Коллекция Цикл
					МассивСтрок = _ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", ПараметрЗапроса.Имя));

					Если МассивСтрок.Количество() = 0 Тогда
						НС = _ПараметрыЗапроса.Добавить();
						ЗаполнитьЗначенияСвойств(НС, ПараметрЗапроса);
						Если Не ПараметрЗапроса.ЭтоСпецЗначение Тогда
							НС.Значение = ПараметрЗапроса._ТипЗначения.ПривестиЗначение(НС.Значение);
						КонецЕсли;

					ИначеЕсли Не ПараметрЗапроса.ЭтоСпецЗначение Тогда
						Для Каждого Стр Из МассивСтрок Цикл
							Если Не Стр.ЭтоСпецЗначение И ТипЗнч(Стр.Значение) <> Тип("СписокЗначений") Тогда
								Стр.Значение = ПараметрЗапроса._ТипЗначения.ПривестиЗначение(Стр.Значение);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				вСохранитьДанныеЗапроса("Параметры");
				вЗапросыИзменены(Истина);
			Иначе
				вСообщитьОбОшибке(Коллекция);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьПараметрыПоТекстуЗапроса(Знач ТекстЗапроса)
	Коллекция = Новый Массив;

	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		Попытка
			НайденныеПараметры = Запрос.НайтиПараметры();
		Исключение
			Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;

		Для Каждого ПараметрЗапроса Из НайденныеПараметры Цикл
			Струк = Новый Структура("Имя, Значение, ЭтоСпецЗначение, СпецЗначение, ТипЗначения, _ТипЗначения");

			Струк.Имя = ПараметрЗапроса.Имя;
			Струк.ЭтоСпецЗначение = Ложь;
			Струк.СпецЗначение = "";
			Струк.ТипЗначения = "";

			Если ПараметрЗапроса.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				Струк.ЭтоСпецЗначение = Истина;
				Струк.Значение = "ТаблицаЗначений";
				Струк.ТипЗначения = "ТаблицаЗначений";
				Струк.СпецЗначение = ЗначениеВСтрокуВнутр(Новый ТаблицаЗначений);
			ИначеЕсли ПараметрЗапроса.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
				Струк.ЭтоСпецЗначение = Истина;
				Струк.Значение = Строка(вПолучитьПустойУникальныйИдентификатор());
				Струк.ТипЗначения = "УникальныйИдентификатор";
				Струк.СпецЗначение = ЗначениеВСтрокуВнутр(вПолучитьПустойУникальныйИдентификатор());
			Иначе
				Струк.ЭтоСпецЗначение = Ложь;
				Струк.Значение = Неопределено;
				Струк.СпецЗначение = "";
				Струк._ТипЗначения = ПараметрЗапроса.ТипЗначения;
			КонецЕсли;

			Коллекция.Добавить(Струк);
		КонецЦикла;
	КонецЕсли;

	Возврат Коллекция;
КонецФункции

&НаКлиенте
Процедура _ПреобразоватьТекстВСтроку1С(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Строка = вПолучитьТекстЗапроса(Ложь);
	Если ПустаяСтрока(Строка) Тогда
		Возврат;
	КонецЕсли;

	ТекстовыйДокумент1 = Новый ТекстовыйДокумент;
	ТекстовыйДокумент2 = Новый ТекстовыйДокумент;

	ТекстовыйДокумент1.УстановитьТекст(Строка);

	Для Сч = 1 По ТекстовыйДокумент1.КоличествоСтрок() Цикл
		Значение = ТекстовыйДокумент1.ПолучитьСтроку(Сч);
		Значение = СтрЗаменить(Значение, """", """""");
		ТекстовыйДокумент2.ДобавитьСтроку("|" + Значение);
	КонецЦикла;

	ТекстовыйДокумент2.Показать("Текст запроса");
КонецПроцедуры

&НаКлиенте
Процедура _ВставитьКомандуПрерыванияЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Элементы._ТекстЗапроса.ВыделенныйТекст = "ВЫБРАТЬ 1001 КАК __ВОЗВРАТ__;";
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ВставитьПризнакВыводаGUID(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Элементы._ТекстЗапроса.ВыделенныйТекст = "__GUID__";
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ЗакомментироватьТекстЗапроса(Команда)
	Перем Строка1, Колонка1, Строка2, Колонка2;

	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Если Элементы._ТекстЗапроса.ВыделенныйТекст = "" Тогда
		Возврат;
	КонецЕсли;

	вЗапросыИзменены(Истина);
	Элементы._ТекстЗапроса.ПолучитьГраницыВыделения(Строка1, Колонка1, Строка2, Колонка2);

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(_ТекстЗапроса.ПолучитьТекст());

	Для Сч = Строка1 По ?(Колонка2 = 1, Строка2 - 1, Строка2) Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Стр = "//" + Стр;
		ТекстовыйДокумент.ЗаменитьСтроку(Сч, Стр);
	КонецЦикла;

	_ТекстЗапроса.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());
	Элементы._ТекстЗапроса.УстановитьГраницыВыделения(Строка1, 1, Строка2, 1);

	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _РаскомментироватьТекстЗапроса(Команда)
	Перем Строка1, Колонка1, Строка2, Колонка2;

	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Если Элементы._ТекстЗапроса.ВыделенныйТекст = "" Тогда
		Возврат;
	КонецЕсли;

	вЗапросыИзменены(Истина);
	Элементы._ТекстЗапроса.ПолучитьГраницыВыделения(Строка1, Колонка1, Строка2, Колонка2);

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(_ТекстЗапроса.ПолучитьТекст());

	Для Сч = Строка1 По ?(Колонка2 = 1, Строка2 - 1, Строка2) Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Если Лев(Стр, 2) = "//" Тогда
			Стр = Сред(Стр, 3);
			ТекстовыйДокумент.ЗаменитьСтроку(Сч, Стр);
		КонецЕсли;
	КонецЦикла;

	_ТекстЗапроса.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());
	Элементы._ТекстЗапроса.УстановитьГраницыВыделения(Строка1, 1, Строка2, 1);

	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВводТекста(РезультатЗакрытия = Неопределено, ДопПарам = Неопределено) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") И Не ПустаяСтрока(РезультатЗакрытия) Тогда
		вЗапросыИзменены(Истина);
		вСформироватьЗапросИзСтрокиXML(РезультатЗакрытия, ДопПарам.ИдентификаторЗапроса);
		вВосстановитьДанныеЗапроса();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _ВыполнитьЗапрос(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	мТекСтрокаСпискаВТ = -1;

	Если мТекСтрокаДереваЗапросов <> -1 Тогда
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(мТекСтрокаДереваЗапросов);
		Если ТекДанные <> Неопределено Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(Истина);
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				Если Не Элементы.ГруппаРезультаты.Видимость Тогда
					_СкрытьПанельРезультатов(Неопределено);
				КонецЕсли;
				Если Элементы.ГруппаРезультаты.ТекущаяСтраница <> Элементы.СтрРезультатЗапроса Тогда
					Элементы.ГруппаРезультаты.ТекущаяСтраница = Элементы.СтрРезультатЗапроса;
				КонецЕсли;
				
				// почистим, чтобы не передавать на сервер
				_ТабРезультатыЗапроса.Очистить();
				_ТабВременныеТаблицы.Очистить();
				_ВременнаяТаблицаДанные.Очистить();

				Элементы.ДекорацияРезультатЗапроса.Заголовок = "";
				СтрукРезультат = вВыполнитьЗапросНаСервере(ТекстЗапроса, ТекДанные.Параметры, ТекДанные.СпособВыгрузки);
				Элементы.ДекорацияРезультатЗапроса.Заголовок = "Время выполнения: " + вДлительностьИнтервала(
					СтрукРезультат.ВремяВыполнения) + ", время загрузки: " + вДлительностьИнтервала(
					СтрукРезультат.ВремяЗагрузки) + ", время загрузки ВТ: " + вДлительностьИнтервала(
					СтрукРезультат.ВремяЗагрузкиВТ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вСформироватьИмяНовойКолонкиТаблицы(Знач ТабРезультат, Номер)
	Для Сч = Номер По 1000 Цикл
		НовоеИмя = "__" + Формат(Сч, "ЧГ=0") + "__";
		Если ТабРезультат.Колонки.Найти(НовоеИмя) = Неопределено Тогда
			Номер = Сч + 1;
			Возврат НовоеИмя;
		КонецЕсли;
	КонецЦикла;

	Возврат "ХХХ";
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьВсеСсылочныеТипы()
	Струк = Новый Структура("Справочники,
							|Документы,
							|Перечисления,
							|ПланыВидовХарактеристик,
							|ПланыСчетов,
							|ПланыВидовРасчета,
							|ПланыОбмена,
							|БизнесПроцессы,
							|Задачи");

	ВсеСсылки = Новый ОписаниеТипов(БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы());

	Для Каждого Элем Из Струк Цикл
		ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, Вычислить(Элем.Ключ).ТипВсеСсылки().Типы());
	КонецЦикла;

	Возврат ВсеСсылки;
КонецФункции

&НаСервереБезКонтекста
Процедура вСформироватьДляЗаданныхКолонокGUID(Знач ТабРезультат, Знач ВсеСсылки, Знач ИспользоватьВерхнийРегистр = Ложь)
	КоллекцияКолонок = ТабРезультат.Колонки;
	СтрукКолонки = Новый Структура;

	СтартовыйНомер = 1;
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Если СтрНайти(Колонка.Имя, "__GUID__") <> 0 Тогда
			НовоеИмя = вСформироватьИмяНовойКолонкиТаблицы(ТабРезультат, СтартовыйНомер);
			СтрукКолонки.Вставить(Колонка.Имя, НовоеИмя);
		КонецЕсли;
	КонецЦикла;

	Если СтрукКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТипКолонки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	Для Каждого Элем Из СтрукКолонки Цикл
		Инд = КоллекцияКолонок.Индекс(КоллекцияКолонок[Элем.Ключ]);
		КоллекцияКолонок.Вставить(Инд, Элем.Значение, ТипКолонки);
	КонецЦикла;

	Для Каждого Стр Из ТабРезультат Цикл
		Для Каждого Элем Из СтрукКолонки Цикл
			Значение = Стр[Элем.Ключ];
			Если ЗначениеЗаполнено(Значение) И ВсеСсылки.СодержитТип(ТипЗнч(Значение)) Тогда
				Стр[Элем.Значение] = Значение.УникальныйИдентификатор();
				Если ИспользоватьВерхнийРегистр Тогда
					Стр[Элем.Значение] = ВРег(Стр[Элем.Значение]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого Элем Из СтрукКолонки Цикл
		КоллекцияКолонок.Удалить(Элем.Ключ);
		КоллекцияКолонок[Элем.Значение].Имя = Элем.Ключ;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вУдалитьКолонкиСНеподдерживаемымиТипам(Знач ТабРезультат, Знач ЭтоВременнаяТаблица = Ложь,
	Знач ЭтоТолстыйКлиент = Ложь)
	ТипТЗ = Тип("ТаблицаЗначений");
	ТипХЗ = Тип("ХранилищеЗначения");

	КоллекцияКолонок = ТабРезультат.Колонки;
	СтрукКолонки = Новый Структура;
	СтрукЗначения = Новый Структура;

	СтартовыйНомер = 1;
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Если Колонка.ТипЗначения.СодержитТип(ТипТЗ) Тогда
			Если ЭтоВременнаяТаблица Или Не ЭтоТолстыйКлиент Тогда
				СтрукЗначения.Вставить(Колонка.Имя, "ТаблицаЗначений");
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда
			Если ЭтоВременнаяТаблица Тогда
				СтрукЗначения.Вставить(Колонка.Имя, "ХранилищеЗначения");
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;

		НовоеИмя = вСформироватьИмяНовойКолонкиТаблицы(ТабРезультат, СтартовыйНомер);
		СтрукКолонки.Вставить(Колонка.Имя, НовоеИмя);
	КонецЦикла;

	Если СтрукКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТабРезультат) = Тип("ДеревоЗначений") Тогда
		Для Каждого Элем Из СтрукКолонки Цикл
			КоллекцияКолонок.Удалить(КоллекцияКолонок[Элем.Ключ]);
		КонецЦикла;

		Возврат;
	КонецЕсли;

	ТипКолонки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	Для Каждого Элем Из СтрукКолонки Цикл
		Инд = КоллекцияКолонок.Индекс(КоллекцияКолонок[Элем.Ключ]);
		КоллекцияКолонок.Вставить(Инд, Элем.Значение, ТипКолонки);
		ТабРезультат.ЗаполнитьЗначения(СтрукЗначения[Элем.Ключ], Элем.Значение);
	КонецЦикла;

	Для Каждого Элем Из СтрукКолонки Цикл
		КоллекцияКолонок.Удалить(Элем.Ключ);
		КоллекцияКолонок[Элем.Значение].Имя = Элем.Ключ;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вРассчитатьЗначениеПараметраЗапроса(Знач Параметры, Знач пВыражение)
	Если ПустаяСтрока(пВыражение) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		пЗначение = Вычислить(пВыражение);
	Исключение
		ВызватьИсключение "Ошибка в выражении: " + пВыражение;
	КонецПопытки;

	Возврат пЗначение;
КонецФункции

&НаСервере
Функция вВыполнитьЗапросНаСервере(Знач ТекстЗапрос, Знач ПараметрыЗапроса, Знач СпособВыгрузки,
	Знач пПолучитьПредставлениеXML = Ложь)
	СтрукРезультат = Новый Структура("Отказ, ВремяВыполнения, ВремяЗагрузки, ВремяЗагрузкиВТ, СтрокаXML", Ложь, 0, 0,
		0, "");

	Если Не пПолучитьПредставлениеXML Тогда
		Если Не ПустаяСтрока(_АдресХранилищаВременныхТаблиц) Тогда
			Попытка
				УдалитьИзВременногоХранилища(_АдресХранилищаВременныхТаблиц);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// чистка временных таблиц предыдущего запроса
		_ТабВременныеТаблицы.Очистить();
		_ВременнаяТаблицаДанные.Очистить();

		РеквизитыКУдалению = Новый Массив;

		ТабРезультат = РеквизитФормыВЗначение("_ВременнаяТаблицаДанные");
		ТабРезультат.Очистить();

		Если ТабРезультат.Колонки.Количество() <> 0 Тогда
			Для Каждого Колонка Из ТабРезультат.Колонки Цикл
				РеквизитыКУдалению.Добавить("_ВременнаяТаблицаДанные." + Колонка.Имя);
				Элем = Элементы.Найти("_ВременнаяТаблицаДанные_" + Колонка.Имя);
				Если Элем <> Неопределено Тогда
					Элементы.Удалить(Элем);
				КонецЕсли;
			КонецЦикла;

			ИзменитьРеквизиты( , РеквизитыКУдалению);
		КонецЕсли;
		
		
		// формирование основной таблицы результатов
		РеквизитыКДобавлению = Новый Массив;
		РеквизитыКУдалению = Новый Массив;

		ЭтоВыгрузкаДЗ = (_СпособВыгрузки = 1);
		Элементы._ТабРезультатыЗапроса.Видимость = Не ЭтоВыгрузкаДЗ;
		Элементы._ДеревоРезультатыЗапроса.Видимость = ЭтоВыгрузкаДЗ;

		ТабРезультат = РеквизитФормыВЗначение("_ТабРезультатыЗапроса");
		ТабРезультат.Очистить();
		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			РеквизитыКУдалению.Добавить("_ТабРезультатыЗапроса." + Колонка.Имя);
			Элем = Элементы.Найти("_ТабРезультатыЗапроса_" + Колонка.Имя);
			Если Элем <> Неопределено Тогда
				Элементы.Удалить(Элем);
			КонецЕсли;
		КонецЦикла;

		ТабРезультат = РеквизитФормыВЗначение("_ДеревоРезультатыЗапроса");
		ТабРезультат.Строки.Очистить();
		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			РеквизитыКУдалению.Добавить("_ДеревоРезультатыЗапроса." + Колонка.Имя);
			Элем = Элементы.Найти("_ДеревоРезультатыЗапроса_" + Колонка.Имя);
			Если Элем <> Неопределено Тогда
				Элементы.Удалить(Элем);
			КонецЕсли;
		КонецЦикла;

		Если Не _ВсеСсылочныеТипыСформированы Тогда
			_ВсеСсылочныеТипыСформированы = Истина;
			_ВсеСсылочныеТипы = вПолучитьВсеСсылочныеТипы();
		КонецЕсли;

		Элементы.СтрРезультатЗапроса.Заголовок = "Результат запроса";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапрос;

	пТипОписаниеТипов = Тип("ОписаниеТипов");

	Попытка
		пИмяПараметра = "";

		пЕстьВыражения = Ложь;
		Если ПараметрыЗапроса.НайтиСтроки(Новый Структура("ТипЗначения", "Выражение")).Количество() <> 0 Тогда
			пЕстьВыражения = Истина;
			пСтрукПараметры = Новый Структура;
		КонецЕсли;

		Для Каждого Стр Из ПараметрыЗапроса Цикл
			пИмяПараметра = Стр.Имя;
			Значение = Стр.Значение;

			Если Стр.ЭтоСпецЗначение Тогда
				Если Стр.ТипЗначения = "УникальныйИдентификатор" Тогда
					Значение = Новый УникальныйИдентификатор(Стр.Значение);
				ИначеЕсли Стр.ТипЗначения = "Выражение" Тогда
					Значение = вРассчитатьЗначениеПараметраЗапроса(пСтрукПараметры, Стр.Значение);
				Иначе
					Значение = ЗначениеИзСтрокиВнутр(Стр.СпецЗначение);
				КонецЕсли;
			КонецЕсли;

			Если ТипЗнч(Значение) = пТипОписаниеТипов Тогда
				ЗаданныеТипы = Значение.Типы();
				Если ЗаданныеТипы.Количество() > 0 Тогда
					Запрос.УстановитьПараметр(Стр.Имя, ЗаданныеТипы[0]);
					Если пЕстьВыражения Тогда
						пСтрукПараметры.Вставить(Стр.Имя, ЗаданныеТипы[0]);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Запрос.УстановитьПараметр(Стр.Имя, Значение);
				Если пЕстьВыражения Тогда
					пСтрукПараметры.Вставить(Стр.Имя, Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке("Ошибка при обработке параметра запроса: " + пИмяПараметра);
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		СтрукРезультат.Отказ = Истина;

		Возврат СтрукРезультат;
	КонецПопытки;

	Если пПолучитьПредставлениеXML Тогда
		Попытка
			СтрукРезультат.СтрокаXML = вЗапросВСтрокуXML(Запрос);
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Запрос.МенеджерВременныхТаблиц.Закрыть();
			СтрукРезультат.Отказ = Истина;
		КонецПопытки;

		Возврат СтрукРезультат;
	КонецЕсли;

	Попытка
		ДатаНач = ТекущаяДата();
		МассивРезультатов = Запрос.ВыполнитьПакет();

		Если Ложь Тогда
			// отладка процедуры сохранения запроса
			// Сообщить( СохранитьЗапросДляСДРКонсолиХ(Запрос, "D:\ROL32\1CV83\ERP(МОГ)\Обработки\(Отладка)\777") );
		КонецЕсли;

		СтрукРезультат.ВремяВыполнения = ТекущаяДата() - ДатаНач;

		ДатаНач = ТекущаяДата();

		ПоследнийРезультат = МассивРезультатов[МассивРезультатов.Количество() - 1];

		Если ПоследнийРезультат = Неопределено Тогда
			ТабРезультат = Новый ТаблицаЗначений;
		ИначеЕсли ЭтоВыгрузкаДЗ Тогда
			ТабРезультат = ПоследнийРезультат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Иначе
			ТабРезультат = ПоследнийРезультат.Выгрузить();
		КонецЕсли;

		СтрукРезультат.ВремяЗагрузки = ТекущаяДата() - ДатаНач;

		Если _СоставРезультатов = 1 Или _СоставРезультатов = 2 Тогда
			ДатаНач = ТекущаяДата();

			СтрукВременныеТаблицы = Новый Структура;

			СтрукПакет = вРазобратьПакетЗапросов(Запрос);

			пЧислоЗаписейДляВТ = ?(_СоставРезультатов = 1, ?(_ОграничениеНаЧислоЗаписейДляВременныхТаблиц = 0, -1,
				_ОграничениеНаЧислоЗаписейДляВременныхТаблиц), 1);
			пСтрукДанныеВТ = Новый Структура("ЧислоЗаписей, Таблица", 0);

			Для Каждого Элем Из СтрукПакет.Запросы Цикл
				Если Элем.Значение = -1 Тогда
					Продолжить;
				КонецЕсли;

				ИмяЗапроса = Элем.Ключ;
				Если СтрукПакет.Таблицы[ИмяЗапроса] <> Неопределено Тогда
					Попытка
						пСтрукДанныеВТ = вПолучитьДанныеВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, ИмяЗапроса,
							пЧислоЗаписейДляВТ);
						ТабДанныеВТ = пСтрукДанныеВТ.Таблица;
						вУдалитьКолонкиСНеподдерживаемымиТипам(ТабДанныеВТ, Истина, _ЭтоТолстыйКлиент);
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					ТабДанныеВТ = МассивРезультатов[Элем.Значение].Выгрузить();
					пСтрукДанныеВТ.ЧислоЗаписей = ТабДанныеВТ.Количество();
					вУдалитьКолонкиСНеподдерживаемымиТипам(ТабДанныеВТ, Истина, _ЭтоТолстыйКлиент);
				КонецЕсли;

				НС = _ТабВременныеТаблицы.Добавить();
				НС.Имя = ИмяЗапроса;
				НС.Порядок = Элем.Значение + 1;
				НС.ЧислоСтрок = пСтрукДанныеВТ.ЧислоЗаписей;

				СтрукВременныеТаблицы.Вставить(ИмяЗапроса, ТабДанныеВТ);
			КонецЦикла;
			_ТабВременныеТаблицы.Сортировать("Порядок");
			СтрукРезультат.ВремяЗагрузкиВТ = ТекущаяДата() - ДатаНач;

			Попытка
				_АдресХранилищаВременныхТаблиц = ПоместитьВоВременноеХранилище(СтрукВременныеТаблицы, "");
			Исключение
				вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		СтрукРезультат.Отказ = Истина;
		Возврат СтрукРезультат;
	КонецПопытки;

	Если ЭтоВыгрузкаДЗ Тогда
		Элементы.СтрРезультатЗапроса.Заголовок = "Результат запроса ( " + ТабРезультат.Строки.Количество() + " )";
	Иначе
		Элементы.СтрРезультатЗапроса.Заголовок = "Результат запроса ( " + ТабРезультат.Количество() + " )";
	КонецЕсли;

	Если Не ЭтоВыгрузкаДЗ Тогда
		вСформироватьДляЗаданныхКолонокGUID(ТабРезультат, _ВсеСсылочныеТипы, _ИспользоватьВерхнийРегистрДляGUID);
	КонецЕсли;

	вУдалитьКолонкиСНеподдерживаемымиТипам(ТабРезультат, Ложь, _ЭтоТолстыйКлиент);

	ТипХЗ = Тип("ХранилищеЗначения");
	ТипТЗ = Тип("ТаблицаЗначений");
	ТипТТ = Тип("Тип");
	ТипМВ = Тип("МоментВремени");

	Попытка
		ИмяРеквизитаРезультатов = ?(ЭтоВыгрузкаДЗ, "_ДеревоРезультатыЗапроса", "_ТабРезультатыЗапроса");

		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			Если Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда
				ТипЗначенияРеквизита = Новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипТЗ) Тогда
				ТипЗначенияРеквизита = Новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипТТ) Тогда
				ТипЗначенияРеквизита = Новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипМВ) Тогда
				ТипЗначенияРеквизита = Новый ОписаниеТипов;
			Иначе
				ТипЗначенияРеквизита = Колонка.ТипЗначения;
			КонецЕсли;
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя, ТипЗначенияРеквизита,
				ИмяРеквизитаРезультатов, Колонка.Заголовок, Ложь));
		КонецЦикла;

		ИзменитьРеквизиты(РеквизитыКДобавлению, РеквизитыКУдалению);
		ЗначениеВРеквизитФормы(ТабРезультат, ИмяРеквизитаРезультатов);

		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			Элем = ЭтаФорма.Элементы.Добавить(ИмяРеквизитаРезультатов + "_" + Колонка.Имя, Тип("ПолеФормы"),
				ЭтаФорма.Элементы[ИмяРеквизитаРезультатов]);
			Элем.ПутьКДанным=ИмяРеквизитаРезультатов + "." + Колонка.Имя;
			Элем.Вид=ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы=Колонка.ТипЗначения;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		СтрукРезультат.Отказ = Истина;
		Возврат СтрукРезультат;
	КонецПопытки;

	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат СтрукРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вРазобратьПакетЗапросов(Знач Запрос)
	СтрукРезультат = Новый Структура;
	СтрукРезультат.Вставить("Таблицы", Новый Соответствие);
	СтрукРезультат.Вставить("Запросы", Новый Соответствие);

	Если Запрос = Неопределено Тогда
		Запрос = Новый Запрос;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);

	ИменаВТ = Новый Соответствие;

	Для Каждого Элем Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		ИменаВТ.Вставить(Элем.ПолноеИмя, 1);
	КонецЦикла;
	СоотвЗапросы = Новый Соответствие;
	ИндКон = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	СчетчикА = 0;

	Для Каждого Элем Из СхемаЗапроса.ПакетЗапросов Цикл
		Инд = СхемаЗапроса.ПакетЗапросов.Индекс(Элем);

		Если ТипЗнч(Элем) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Если Инд = ИндКон И ПустаяСтрока(Элем.ТаблицаДляПомещения) Тогда
				Прервать;
			КонецЕсли;

			Если ИменаВТ[Элем.ТаблицаДляПомещения] = Неопределено Тогда
				Пока Истина Цикл
					СчетчикА = СчетчикА + 1;
					ИмяЗапроса = "___" + СчетчикА + "___";
					Если ИменаВТ[ИмяЗапроса] = Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;

				СоотвЗапросы[ИмяЗапроса] = Инд;
			Иначе
				СоотвЗапросы[Элем.ТаблицаДляПомещения] = Инд;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элем) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			СоотвЗапросы[Элем.ИмяТаблицы] = -1;
		КонецЕсли;
	КонецЦикла;

	СтрукРезультат.Таблицы = ИменаВТ;
	СтрукРезультат.Запросы = СоотвЗапросы;

	Возврат СтрукРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьРазмерыВременныхТаблиц(Знач пМВТ)
	пСтрук = Новый Структура;
	пРезультат = Новый Структура("ВсегоЗаписей, Таблицы", 0, пСтрук);

	Если пМВТ = Неопределено Тогда
		Возврат пРезультат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = пМВТ;

	пЗапросы = Новый Массив;

	пШаблонЗапроса =
	"ВЫБРАТЬ
	|	""%1"" КАК Имя,
	|	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
	|ИЗ
	|	%1 КАК т
	|";

	пТекстЗапроса = "";

	Для Каждого пТаб Из пМВТ.Таблицы Цикл
		пЗапросы.Добавить(СтрЗаменить(пШаблонЗапроса, "%1", пТаб.ПолноеИмя));
	КонецЦикла;

	Запрос.Текст = СтрСоединить(пЗапросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		пСтрук.Вставить(Выборка.Имя, Выборка.ЧислоЗаписей);
		пРезультат.ВсегоЗаписей = пРезультат.ВсегоЗаписей + Выборка.ЧислоЗаписей;
	КонецЦикла;

	Запрос.МенеджерВременныхТаблиц = Неопределено;

	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьДанныеВременнойТаблицы(Знач пМВТ, Знач пИмяТаблицы, Знач пЧислоЗаписей = -1)
	пРезультат = Новый Структура("ЧислоЗаписей, Таблица", 0, Новый ТаблицаЗначений);

	Если пМВТ = Неопределено Тогда
		Возврат пРезультат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = пМВТ;

	Запрос.Текст = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
				   |ИЗ
				   |	" + пИмяТаблицы + " КАК т
										  |;
										  |
										  |////////////////////////////////////////////////////////////////////////////////
										  |ВЫБРАТЬ " + ?(пЧислоЗаписей < 0, "", " ПЕРВЫЕ " + Формат(пЧислоЗаписей,
		"ЧН=0; ЧГ=0")) + "
						 |	т.*
						 |ИЗ
						 |	" + пИмяТаблицы + " КАК т";
	пМассив = Запрос.ВыполнитьПакет();

	пРезультат.ЧислоЗаписей = пМассив[0].Выгрузить()[0].ЧислоЗаписей;
	пРезультат.Таблица = пМассив[1].Выгрузить();

	Запрос.МенеджерВременныхТаблиц = Неопределено;

	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _СоставРезультатовПриИзменении(Элемент)
	вУстановитьВидимостьРаздела_ВременныеТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьВидимостьРаздела_ВременныеТаблицы()
	Если _СоставРезультатов = 0 Тогда
		Элементы.СтрВременныеТаблицы.Видимость = Ложь;
	Иначе
		Элементы.СтрВременныеТаблицы.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вСформироватьЗапросИзСтрокиXML(Знач СтрокаXML, Знач ИдентификаторЗапроса)
	Перем СжиматьПараметрыXML;
	СжиматьПараметрыXML = Ложь;

	Попытка
		ТекДанные = _ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторЗапроса);

		Если ТекДанные <> Неопределено Тогда
			СтрукЗапрос = вЗначениеИзСтрокиXML(СтрокаXML);

			СтрукЗапрос.Свойство("СжиматьПараметрыXML", СжиматьПараметрыXML);
			СжиматьПараметрыXML = (СжиматьПараметрыXML = Истина);

			ТекДанные.Текст = "";
			ТекДанные.Параметры.Очистить();

			ТекДанные.Текст = СтрукЗапрос.Текст;
			
			// ВАЖНО: алгоритм формирования параметров должен быть идентичен (метка:001)
			ПараметрыЗапроса = СтрукЗапрос.Параметры;
			Для Каждого Элем Из ПараметрыЗапроса Цикл
				Если ТипЗнч(Элем.Значение) = Тип("ХранилищеЗначения") Тогда
					ЗначениеПараметра = Элем.Значение.Получить();
				Иначе
					ЗначениеПараметра = Элем.Значение;
				КонецЕсли;

				СтрукПараметр = Новый Структура;
				СтрукПараметр.Вставить("Имя", Элем.Ключ);
				СтрукПараметр.Вставить("Значение", ЗначениеПараметра);
				СтрукПараметр.Вставить("ЭтоСпецЗначение", Ложь);
				СтрукПараметр.Вставить("СпецЗначение", "");
				СтрукПараметр.Вставить("ТипЗначения", "");

				Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ЗначениеПараметра);
					СтрукПараметр.Значение = Список;

				ИначеЕсли ТипЗнч(Элем.Значение) = Тип("ФиксированныйМассив") Тогда
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(Новый Массив(Элем.Значение));
					СтрукПараметр.Значение = Список;

				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Граница") Тогда
					СтрукПараметр.ЭтоСпецЗначение = Истина;
					СтрукПараметр.Значение = "Граница";
					СтрукПараметр.ТипЗначения = "Граница";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);
					СтрукПараметр.Значение = Строка(ЗначениеПараметра.Значение) + ";" + Строка(
						ЗначениеПараметра.ВидГраницы);

				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
					СтрукПараметр.ЭтоСпецЗначение = Истина;
					СтрукПараметр.Значение = "ТаблицаЗначений";
					СтрукПараметр.ТипЗначения = "ТаблицаЗначений";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);

				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("МоментВремени") Тогда
					СтрукПараметр.ЭтоСпецЗначение = Истина;
					СтрукПараметр.Значение = "МоментВремени";
					СтрукПараметр.ТипЗначения = "МоментВремени";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(Элем.Значение);
					СтрукПараметр.Значение = Строка(ЗначениеПараметра);

				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("УникальныйИдентификатор") Тогда
					СтрукПараметр.ЭтоСпецЗначение = Истина;
					СтрукПараметр.Значение = Строка(ЗначениеПараметра);
					СтрукПараметр.ТипЗначения = "УникальныйИдентификатор";
					СтрукПараметр.СпецЗначение = ЗначениеВСтрокуВнутр(ЗначениеПараметра);
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(ТекДанные.Параметры.Добавить(), СтрукПараметр);
			КонецЦикла;
		КонецЕсли;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстПараметра(пЗначениеПараметра)

	типПараметра = ТипЗнч(пЗначениеПараметра);

	текстПараметр = "";
	Если типПараметра = Тип("Строка") Тогда
		текстПараметр = """" + пЗначениеПараметра + """";
	ИначеЕсли типПараметра = Тип("Число") Тогда
		текстПараметр = Формат(пЗначениеПараметра, "ЧГ=0");
	ИначеЕсли типПараметра = Тип("Булево") Тогда
		текстПараметр = Формат(пЗначениеПараметра, "ДФ=yyyyMMdd; БЛ=Ложь; БИ=Истина");
	ИначеЕсли типПараметра = Тип("Дата") Тогда
		текстПараметр = "Дата(""" + Формат(пЗначениеПараметра, "ДФ=yyyyMMdd") + """)";
	ИначеЕсли пЗначениеПараметра = Неопределено Тогда
		текстПараметр = "Неопределено";
	КонецЕсли;

	Если Не ПустаяСтрока(текстПараметр) Тогда
		Возврат текстПараметр;
	КонецЕсли; //для примитивных типов
	тзМенеджеры = Новый ТаблицаЗначений;
	тзМенеджеры.Колонки.Добавить("Менеджер");
	тзМенеджеры.Колонки.Добавить("ИмяМенеджера");
	тзМенеджеры.Колонки.Добавить("ЕстьНомер");
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Справочники;
	новСтрока.ИмяМенеджера = "Справочники";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Документы;
	новСтрока.ИмяМенеджера = "Документы";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = БизнесПроцессы;
	новСтрока.ИмяМенеджера = "БизнесПроцессы";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Задачи;
	новСтрока.ИмяМенеджера = "Задачи";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыВидовРасчета;
	новСтрока.ИмяМенеджера = "ПланыВидовРасчета";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыВидовХарактеристик;
	новСтрока.ИмяМенеджера = "ПланыВидовХарактеристик";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыСчетов;
	новСтрока.ИмяМенеджера = "ПланыСчетов";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыОбмена;
	новСтрока.ИмяМенеджера = "ПланыОбмена";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Перечисления;
	новСтрока.ИмяМенеджера = "Перечисления";
	новСтрока.ЕстьНомер = "Перечисления";

	метаПараметра = пЗначениеПараметра.Метаданные();
	этоПредопределенный = Ложь;
	Попытка
		этоПредопределенный = пЗначениеПараметра.Предопределенный;
	Исключение
	КонецПопытки;

	Для Каждого строкаМенеджера Из тзМенеджеры Цикл
		Если строкаМенеджера.Менеджер.ТипВсеСсылки().СодержитТип(типПараметра) Тогда
			Если этоПредопределенный Тогда
				имяПредопределенного = строкаМенеджера.Менеджер[метаПараметра.Имя].ПолучитьИмяПредопределенного(
					пЗначениеПараметра);
				текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + "." + имяПредопределенного;
			ИначеЕсли Не ЗначениеЗаполнено(пЗначениеПараметра) Тогда
				текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".ПустаяСсылка()";
			ИначеЕсли строкаМенеджера.ЕстьНомер = "Перечисления" Тогда
				индексЗначенияПеречисления = Перечисления[метаПараметра.Имя].Индекс(пЗначениеПараметра);
				имяЗначения = Метаданные.Перечисления[метаПараметра.Имя].ЗначенияПеречисления[индексЗначенияПеречисления].Имя;
				текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + "." + имяЗначения;
			ИначеЕсли строкаМенеджера.ЕстьНомер = Истина Тогда
				периодичностьНомера = Ложь;
				Если строкаМенеджера.ИмяМенеджера = "Документы" Или строкаМенеджера.ИмяМенеджера = "БизнесПроцессы" Тогда
					периодичностьНомера = ?(метаПараметра.ПериодичностьНомера = "Непериодический", Ложь, Истина);
				КонецЕсли;
				Если периодичностьНомера Тогда
					периодПараметр = пЗначениеПараметра.Дата;
					Если Строка(метаПараметра.ПериодичностьНомера) = "Год" Тогда
						периодПараметр = НачалоГода(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Квартал" Тогда
						периодПараметр = НачалоКвартала(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Месяц" Тогда
						периодПараметр = НачалоМесяца(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "День" Тогда
						периодПараметр = НачалоДня(периодПараметр);
					КонецЕсли;
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоНомеру("""
							+ СокрЛП(пЗначениеПараметра.Номер) + """,Дата(""" + Формат(периодПараметр, "ДФ=yyyyMMdd")
							+ """))";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоНомеру("
							+ Формат(пЗначениеПараметра.Номер, "ЧГ=0") + ",Дата(""" + Формат(периодПараметр,
							"ДФ=yyyyMMdd") + """))";
					КонецЕсли;
				Иначе
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоНомеру("""
							+ СокрЛП(пЗначениеПараметра.Номер) + """)";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоНомеру("
							+ Формат(пЗначениеПараметра.Номер, "ЧГ=0") + ")";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли метаПараметра.ДлинаКода > 0 Тогда
				Если Строка(метаПараметра.ТипКода) = "Строка" Тогда
					текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоКоду(""" + СокрЛП(
						пЗначениеПараметра.Код) + """)";
				Иначе
					текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоКоду(" + Формат(
						пЗначениеПараметра.Код, "ЧГ=0") + ")";
				КонецЕсли;
			Иначе
				текстПараметр = строкаМенеджера.ИмяМенеджера + "." + метаПараметра.Имя + ".НайтиПоНаименованию("""
					+ СокрЛП(пЗначениеПараметра.Наименование) + """)";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат текстПараметр;

КонецФункции
#КонецОбласти
#КонецОбласти
#Область РезультатыЗапросов

&НаКлиенте
Функция вПолучитьИмяТаблицыДляОбработки()
	ИмяРеквизита = "";

	Если Элементы.ГруппаРезультаты.ТекущаяСтраница = Элементы.СтрРезультатЗапроса Тогда
		ИмяРеквизита = "_ТабРезультатыЗапроса";
	ИначеЕсли Элементы.ГруппаРезультаты.ТекущаяСтраница = Элементы.СтрВременныеТаблицы Тогда
		ИмяРеквизита = "_ВременнаяТаблицаДанные";
	КонецЕсли;

	Возврат ИмяРеквизита;
КонецФункции

&НаКлиенте
Процедура вПриАктивизацииСтрокиСпискаВТ() Экспорт
	вПоказатьВременныуюТаблицу(мТекСтрокаСпискаВТ);
КонецПроцедуры

&НаКлиенте
Процедура _ТабВременныеТаблицыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элемент.ТекущаяСтрока;
	Если ТекСтрока <> мТекСтрокаСпискаВТ Тогда
		мТекСтрокаСпискаВТ = ТекСтрока;
		ПодключитьОбработчикОжидания("вПриАктивизацииСтрокиСпискаВТ", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ТабРезультатыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 2);
		Значение = ТекДанные[ИмяКолонки];

		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
		Иначе
			ПоказатьЗначение( , Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВременнаяТаблицаДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 2);
		ПоказатьЗначение( , ТекДанные[ИмяКолонки]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПоместитьТаблицуВПараметрЗапроса(Команда)
	Если вСЗапросомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;

	вПоместитьТаблицуВПараметрЗапроса(ИмяРеквизита);

	вСохранитьДанныеЗапроса("Параметры");
	вЗапросыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьТаблицуВФайл(Команда)
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;

	Диалог = вПолучитьДиалогВыбораФайлаДанных(Ложь);
	Диалог.Показать(Новый ОписаниеОповещения("вСохранитьТаблицуВФайл", ЭтаФорма, ИмяРеквизита));
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьТаблицуВФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда

		Попытка
			Струк = Новый Структура;
			Струк.Вставить("Формат", мИмяОбработки);
			Струк.Вставить("Версия", 1);
			Струк.Вставить("Назначение", "ТаблицаЗначений");
			Струк.Вставить("Данные", вПреобразоватьРеквизитФормыВСтрокуВнутр(ДопПараметры));

			СтрокаДанных = вЗначениеВСтрокуВнутр(Струк);

			ТДок = Новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаДанных);

			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЗапись( , ВыбранныеФайлы[0]);
			Иначе
				ТДок.Записать(ВыбранныеФайлы[0]);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗагрузитьТаблицуИзФайла(Команда)
	ИмяРеквизита = вПолучитьИмяТаблицыДляОбработки();
	Если ИмяРеквизита = "" Тогда
		Возврат;
	КонецЕсли;

	Диалог = вПолучитьДиалогВыбораФайлаДанных(Истина);
	Диалог.Показать(Новый ОписаниеОповещения("вЗагрузитьТаблицуИзФайла", ЭтаФорма, ИмяРеквизита));
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьТаблицуИзФайла(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		Попытка
			ТДок = Новый ТекстовыйДокумент;

			СтрукДалее = Новый Структура("ТДок", ТДок);

			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЧтение(Новый ОписаниеОповещения("вЗагрузитьТаблицуИзФайлаДалее", ЭтаФорма, ТДок),
					ВыбранныеФайлы[0]);
			Иначе
				ТДок.Прочитать(ВыбранныеФайлы[0]);
				вЗагрузитьТаблицуИзФайлаДалее(ТДок);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьТаблицуИзФайлаДалее(ТДок) Экспорт
	Попытка
		СтрокаДанных = ТДок.ПолучитьТекст();

		Попытка
			Струк = вЗначениеИзСтрокиВнутр(СтрокаДанных);
		Исключение
			вСообщитьОбОшибке("Неверный формат файла данных!");
			Возврат;
		КонецПопытки;

		Если Не вПроверитьДанныеПередЗагрузкойТаблицы(Струк) Тогда
			Возврат;
		КонецЕсли;

		вЗагрузитьДанныеВТаблицуРезультатов(Струк.Данные);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция вПроверитьДанныеПередЗагрузкойТаблицы(Струк)
	Текст = "Неверный формат файла данных!";
	СтрукЗаголовок = Новый Структура("Формат, Версия, Назначение, Данные");

	Если ТипЗнч(Струк) <> Тип("Структура") Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрукЗаголовок, Струк);

	Если СтрукЗаголовок.Формат <> мИмяОбработки Или СтрукЗаголовок.Данные = Неопределено Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;

	Если СтрукЗаголовок.Назначение <> "ТаблицаЗначений" Тогда
		Возврат вСообщитьОбОшибке("Файл не предназначен для загрузки таблицы!");
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаСервере
Процедура вЗагрузитьДанныеВТаблицуРезультатов(Знач ДанныеСтрокой)
	Попытка
		ТабДанныеДляЗагрузки = ЗначениеИзСтрокиВнутр(ДанныеСтрокой);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	Если ТипЗнч(ТабДанныеДляЗагрузки) <> Тип("ТаблицаЗначений") Тогда
		вСообщитьОбОшибке("Неверные данные для загрузки!");
		Возврат;
	КонецЕсли;

	РеквизитыКДобавлению = Новый Массив;
	РеквизитыКУдалению = Новый Массив;

	ТабРезультат = РеквизитФормыВЗначение("_ТабРезультатыЗапроса");
	ТабРезультат.Очистить();
	Для Каждого Колонка Из ТабРезультат.Колонки Цикл
		РеквизитыКУдалению.Добавить("_ТабРезультатыЗапроса." + Колонка.Имя);
		Элем = Элементы.Найти("_ТабРезультатыЗапроса_" + Колонка.Имя);
		Если Элем <> Неопределено Тогда
			Элементы.Удалить(Элем);
		КонецЕсли;
	КонецЦикла;

	ТабРезультат = ТабДанныеДляЗагрузки;

	Попытка
		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,
				"_ТабРезультатыЗапроса", Колонка.Заголовок, Ложь));
		КонецЦикла;

		ИзменитьРеквизиты(РеквизитыКДобавлению, РеквизитыКУдалению);
		ЗначениеВРеквизитФормы(ТабРезультат, "_ТабРезультатыЗапроса");

		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			Элем = ЭтаФорма.Элементы.Добавить("_ТабРезультатыЗапроса_" + Колонка.Имя, Тип("ПолеФормы"),
				ЭтаФорма.Элементы._ТабРезультатыЗапроса);
			Элем.ПутьКДанным="_ТабРезультатыЗапроса." + Колонка.Имя;
			Элем.Вид=ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы=Колонка.ТипЗначения;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура вПоказатьВременныуюТаблицу(Знач ТекСтрока)
	РеквизитыКДобавлению = Новый Массив;
	РеквизитыКУдалению = Новый Массив;

	ТабРезультат = РеквизитФормыВЗначение("_ВременнаяТаблицаДанные");
	ТабРезультат.Очистить();
	Для Каждого Колонка Из ТабРезультат.Колонки Цикл
		РеквизитыКУдалению.Добавить("_ВременнаяТаблицаДанные." + Колонка.Имя);
		Элем = Элементы.Найти("_ВременнаяТаблицаДанные_" + Колонка.Имя);
		Если Элем <> Неопределено Тогда
			Элементы.Удалить(Элем);
		КонецЕсли;
	КонецЦикла;

	ТабРезультат = Новый ТаблицаЗначений;

	ТекДанные = ?(ТекСтрока = Неопределено, Неопределено, _ТабВременныеТаблицы.НайтиПоИдентификатору(ТекСтрока));
	Если ТекДанные <> Неопределено Тогда
		Если Не ПустаяСтрока(_АдресХранилищаВременныхТаблиц) Тогда
			Попытка
				СтрукВТ = ПолучитьИзВременногоХранилища(_АдресХранилищаВременныхТаблиц);
				Если СтрукВТ.Свойство(ТекДанные.Имя) Тогда
					ТабРезультат = СтрукВТ[ТекДанные.Имя];
				КонецЕсли;
			Исключение
				вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ТипТТ = Тип("Тип");
		ТипМВ = Тип("МоментВремени");

		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			Если Колонка.ТипЗначения.СодержитТип(ТипТТ) Тогда
				ТипЗначенияРеквизита = Новый ОписаниеТипов;
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипМВ) Тогда
				ТипЗначенияРеквизита = Новый ОписаниеТипов;
			Иначе
				ТипЗначенияРеквизита = Колонка.ТипЗначения;
			КонецЕсли;
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя, ТипЗначенияРеквизита,
				"_ВременнаяТаблицаДанные", Колонка.Заголовок, Ложь));
		КонецЦикла;

		ИзменитьРеквизиты(РеквизитыКДобавлению, РеквизитыКУдалению);
		ЗначениеВРеквизитФормы(ТабРезультат, "_ВременнаяТаблицаДанные");

		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			Элем = ЭтаФорма.Элементы.Добавить("_ВременнаяТаблицаДанные_" + Колонка.Имя, Тип("ПолеФормы"),
				ЭтаФорма.Элементы._ВременнаяТаблицаДанные);
			Элем.ПутьКДанным="_ВременнаяТаблицаДанные." + Колонка.Имя;
			Элем.Вид=ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы=Колонка.ТипЗначения;
		КонецЦикла;
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура вПоместитьТаблицуВПараметрЗапроса(Знач ИмяРеквизита)
	ТабРезультат = РеквизитФормыВЗначение(ИмяРеквизита);

	НС = _ПараметрыЗапроса.Добавить();
	НС.ЭтоСпецЗначение = Истина;
	НС.Имя = "ТабДанные";
	НС.Значение = "ТаблицаЗначений";
	НС.ТипЗначения = "ТаблицаЗначений";
	НС.СпецЗначение = ЗначениеВСтрокуВнутр(ТабРезультат);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоРезультатыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяКолонки = Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 2);
		Значение = ТекДанные[ИмяКолонки];

		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
		Иначе
			ПоказатьЗначение( , Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область РаботаСАлгоритмами

&НаКлиенте
Функция вКореньДереваАлгоритмов()
	Возврат _ДеревоАлгоритмов.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция вТекущийАлгоритмКорневой()
	Возврат (Элементы._ДеревоАлгоритмов.ТекущиеДанные = вКореньДереваАлгоритмов());
КонецФункции

&НаКлиенте
Функция вСАлгоритмомРаботатьНельзя()
	Возврат Элементы.Алгоритм.ТолькоПросмотр;
КонецФункции
#Область ВыполнениеАлгоритмов

&НаСервереБезКонтекста
Функция вВыполнитьАлгоритмНаСервереХХХ(П, Алгоритм)
	Выполнить (Алгоритм);
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция вПреобразоватьАлгоритмСУчетомВызоваСервера(Алгоритм)
	Результат = Новый Структура("Клиент, Сервер", "", "");

	СерверНач = "//--- Сервер:старт";
	СерверКон = "//--- Сервер:финиш";

	Если Найти(Алгоритм, СерверНач) = 0 Или Найти(Алгоритм, СерверКон) = 0 Тогда
		Результат.Клиент = Алгоритм;
		Возврат Результат;
	КонецЕсли;

	ЭтоСервернаяЧасть = Ложь;
	ТекстКлиент = "";
	ТекстСервер = "";

	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Алгоритм);

	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		Стр = Текст.ПолучитьСтроку(Сч);
		Если ЭтоСервернаяЧасть Тогда
			Если Найти(Стр, СерверКон) = 0 Тогда
				ТекстСервер = ТекстСервер + Символы.ПС + Стр;
			Иначе
				ЭтоСервернаяЧасть = Ложь;
			КонецЕсли;
		Иначе
			Если Найти(Стр, СерверНач) = 0 Тогда
				ТекстКлиент = ТекстКлиент + Символы.ПС + Стр;
			Иначе
				Если Не ПустаяСтрока(ТекстСервер) Тогда
					Сообщить("В тексте алгоритма допускается только одна серверная часть!");
					Возврат Неопределено;
				КонецЕсли;

				ЭтоСервернаяЧасть = Истина;
				ТекстКлиент = ТекстКлиент + Символы.ПС + "вВыполнитьАлгоритмНаСервереХХХ(П, __АлгоритмНаСервере);";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Результат.Клиент = ТекстКлиент;
	Результат.Сервер = ТекстСервер;

	Возврат Результат;
КонецФункции

&НаСервере
Процедура вВыполнитьАлгоритмНаСервере(Знач Выражение, Знач ТолькоСинтаксическийКонтроль = Ложь)
	ТабРезультат = _ТабРезультатыЗапроса;

	Если _ИспользоватьПопыткуДляАлгоритма Тогда
		Попытка
			Выполнить (Выражение);
			Если ТолькоСинтаксическийКонтроль Тогда
				Сообщить("Проверка пройдена");
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Выполнить (Выражение);
		Если ТолькоСинтаксическийКонтроль Тогда
			Сообщить("Проверка пройдена");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьАлгоритмНаКлиенте(Знач Выражение, Знач ТолькоСинтаксическийКонтроль = Ложь)
	Перем П;
	Перем __АлгоритмНаСервере;

	П = Новый Структура("Результат", Истина);
	__АлгоритмНаСервере = "";

	ТабРезультат = _ТабРезультатыЗапроса;

	СтрукАлгоритм = вПреобразоватьАлгоритмСУчетомВызоваСервера(Выражение);
	Если СтрукАлгоритм = Неопределено Или ПустаяСтрока(СтрукАлгоритм.Клиент) Тогда
		Возврат;
	КонецЕсли;

	__АлгоритмНаСервере = СтрукАлгоритм.Сервер;

	Если _ИспользоватьПопыткуДляАлгоритма Тогда
		Попытка
			Выполнить (СтрукАлгоритм.Клиент);
			Если ТолькоСинтаксическийКонтроль Тогда
				Сообщить("Проверка пройдена");
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Выполнить (СтрукАлгоритм.Клиент);
		Если ТолькоСинтаксическийКонтроль Тогда
			Сообщить("Проверка пройдена");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьАлгоритм(ТолькоСинтаксическийКонтроль = Ложь)
	Выражение = Элементы.Алгоритм.ВыделенныйТекст;
	Если ПустаяСтрока(Выражение) Тогда
		ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
		Выражение = ?(ТекДанные = Неопределено, "", СокрЛП(ТекДанные.Алгоритм));
	КонецЕсли;

	Если Не ПустаяСтрока(Выражение) Тогда
		Если ТолькоСинтаксическийКонтроль Тогда
			Выражение = "Если ложь Тогда
						|" + Выражение + "
										 |КонецЕсли;";
		КонецЕсли;

		Если _ВыполнятьАлгоритмНаСервере Тогда
			вВыполнитьАлгоритмНаСервере(Выражение, ТолькоСинтаксическийКонтроль);
		Иначе
			вВыполнитьАлгоритмНаКлиенте(Выражение, ТолькоСинтаксическийКонтроль);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьАлгоритм(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	вВыполнитьАлгоритм(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура _ПроверитьАлгоритм(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	вВыполнитьАлгоритм(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрыАлгоритма(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	Струк = Новый Структура("мДата, мДатаВремя, мДокумент, мПВХ, мПеречисление, мСписокЗначений, мСправочник, мСчет, мЧисло");

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ТабРезультат");
	СписокЗначений.Добавить("");
	Для Каждого Элем Из Струк Цикл
		СписокЗначений.Добавить(Элем.Ключ);
	КонецЦикла;

	СписокЗначений.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("вОбработатьВыборПараметраАлгоритма", ЭтаФорма),
		"Параметр алгоритма");
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборПараметраАлгоритма(ВыбранныйЭлемент, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы.Алгоритм.ВыделенныйТекст = ВыбранныйЭлемент.Значение;
		вАлгоритмыИзменены(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПримерАлгоритмаКлиент(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	ТекстПримера =
	"
	|НомерСтроки = 0;
	|ВсегоСтрок = ТабРезультат.Количество();
	|
	|П = новый Структура(""Результат, Ссылка"", истина);
	|Для каждого Стр из ТабРезультат Цикл
	|	ОбработкаПрерыванияПользователя();
	|
	|	НомерСтроки = НомерСтроки + 1;
	|	
	|	Если НомерСтроки % 100 = 0 Тогда
	|		Состояние(""Обработано "" + НомерСтроки + "" из "" + ВсегоСтрок, 100 * НомерСтроки / ВсегоСтрок);
	|	КонецЕсли;
	|
	|	Если Стр.Обработано Тогда
	|		Продолжить;
	|	КонецЕсли;
	|
	|	ЗаполнитьЗначенияСвойств(П, Стр);
	|	П.Результат = истина;
	|
	|	//--- Сервер:старт
	|	Данные = П.Ссылка.ПолучитьОбъект();
	|	Данные.ОбменДанными.Загрузка = истина;
	|	//Данные.Номер = Данные.Номер;
	|
	|	Попытка
	|		//Данные.Записать();
	|		П.Результат = истина;
	|	Исключение
	|		Сообщить(ОписаниеОшибки());
	|		П.Результат = ложь;
	|	КонецПопытки;
	|	//--- Сервер:финиш
	|	
	|	Если П.Результат <> истина Тогда
	|		Прервать;
	|	КонецЕсли;
	|
	|	Стр.Обработано = истина;
	|КонецЦикла;
	|";

	Элементы.Алгоритм.ВыделенныйТекст = ТекстПримера;
	_ВыполнятьАлгоритмНаСервере = Ложь;

	вАлгоритмыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ПримерАлгоритмаСервер(Команда)
	Если вСАлгоритмомРаботатьНельзя() Тогда
		Возврат;
	КонецЕсли;

	ТекстПримера =
	"
	|Для каждого Стр из ТабРезультат Цикл
	|	Данные = Стр.Ссылка.ПолучитьОбъект();
	|	Данные.ОбменДанными.Загрузка = истина;
	|	Данные.Наименование = СокрЛП(Данные.Наименование);
	|	Попытка
	|		Данные.Записать();
	|	Исключение
	|		Сообщить(ОписаниеОшибки());
	|		Прервать;
	|	КонецПопытки;
	|КонецЦикла;
	|";

	Элементы.Алгоритм.ВыделенныйТекст = ТекстПримера;
	_ВыполнятьАлгоритмНаСервере = Истина;

	вАлгоритмыИзменены(Истина);
КонецПроцедуры

#КонецОбласти
#Область СохранениеЗагрузка

&НаКлиенте
Функция вПроверитьДанныеПередЗагрузкойАлгоритмов(Струк)
	Текст = "Неверный формат файла алгоритмов!";
	СтрукЗаголовок = Новый Структура("Формат, Версия, Назначение, Элементы");

	Если ТипЗнч(Струк) <> Тип("Структура") Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрукЗаголовок, Струк);

	Если СтрукЗаголовок.Формат <> мИмяОбработки Или СтрукЗаголовок.Элементы = Неопределено Тогда
		Возврат вСообщитьОбОшибке(Текст);
	КонецЕсли;

	Если СтрукЗаголовок.Назначение <> "Алгоритмы" Тогда
		Возврат вСообщитьОбОшибке("Файл не предназначен для загрузки алгоритмов!");
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура вПреобразоватьЦепочкуАлгоритмовВСтруктуру(ЭтоПервыйВызов = Истина, Результат, Знач СтрокиДЗ,
	Массив = Неопределено)
	Если ЭтоПервыйВызов Тогда
		Результат = Новый Структура;
		Результат.Вставить("Формат", мИмяОбработки);
		Результат.Вставить("Версия", 1);
		Результат.Вставить("Назначение", "Алгоритмы");
		Результат.Вставить("Элементы", Новый Массив);
	КонецЕсли;

	Для Каждого СтрДЗ Из СтрокиДЗ Цикл
		Струк = Новый Структура("Имя, Алгоритм, Параметры, Комментарий");
		ЗаполнитьЗначенияСвойств(Струк, СтрДЗ);
		Струк.Вставить("Дети", Новый Массив);
		вПреобразоватьЦепочкуАлгоритмовВСтруктуру(Ложь, Результат, СтрДЗ.ПолучитьЭлементы(), Струк.Дети);

		Если ЭтоПервыйВызов Тогда
			Результат.Элементы.Добавить(Струк);
		Иначе
			Массив.Добавить(Струк);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЦепочкуАлгоритмовИзМассива(Знач УзелДЗ, Массив)
	Для Каждого Струк Из Массив Цикл
		СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрДЗ, Струк);
		Если Струк.Дети.Количество() > 0 Тогда
			вЗагрузитьЦепочкуАлгоритмовИзМассива(СтрДЗ, Струк.Дети);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьДиалогВыбораФайлаАлгоритмов(Открытие = Истина, ПутьКФайлу = "")
	пСтрук = вРазобратьПутьКФайлу(ПутьКФайлу);

	Диалог = Новый ДиалогВыбораФайла(?(Открытие, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Каталог = пСтрук.Каталог;
	Диалог.ПолноеИмяФайла = пСтрук.Имя;
	Диалог.Заголовок  = "Файл алгоритмов";
	Диалог.Фильтр     = "Файлы алгоритмов (*.xbsl)|*.xbsl|Все файлы (*.*)|*.*";
	Диалог.Расширение = "xbsl";

	Возврат Диалог;
КонецФункции

&НаКлиенте
Процедура вСохранитьАлгоритмыВФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда

		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуАлгоритмов = ВыбранныеФайлы[0];
			СтрокиДЗ = вКореньДереваАлгоритмов().ПолучитьЭлементы();
		Иначе
			СтрокиДЗ = вСоздатьМассив(ДопПараметры);
		КонецЕсли;

		вСохранитьПараметрыАлгоритма(Элементы._ДеревоАлгоритмов.ТекущиеДанные);

		Попытка
			Струк = Новый Структура;
			вПреобразоватьЦепочкуАлгоритмовВСтруктуру(Истина, Струк, СтрокиДЗ);
			СтрокаДанных = вЗначениеВСтрокуВнутр(Струк);

			ТДок = Новый ТекстовыйДокумент;
			ТДок.УстановитьТекст(СтрокаДанных);

			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЗапись(Новый ОписаниеОповещения("вСохранитьАлгоритмыВФайлДалее", ЭтаФорма),
					ВыбранныеФайлы[0]);
				Возврат;
			Иначе
				ТДок.Записать(ВыбранныеФайлы[0]);
			КонецЕсли;

			вАлгоритмыИзменены(Ложь);
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСохранитьАлгоритмыВФайлДалее(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Истина Тогда
		вАлгоритмыИзменены(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьАлгоритмыИзФайла(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		СтрукДалее = Новый Структура("ТДок, УзелДЗ, ПутьКФайлуАлгоритмов");

		Если ДопПараметры = Неопределено Тогда
			_ПутьКФайлуАлгоритмов = "";
			вОчиститьДеревоАлгоритмов();
			УзелДЗ = вКореньДереваАлгоритмов();
			СтрукДалее.ПутьКФайлуАлгоритмов = ВыбранныеФайлы[0];
		Иначе
			УзелДЗ = ДопПараметры;
		КонецЕсли;

		СтрукДалее.УзелДЗ = УзелДЗ;

		Попытка
			ТДок = Новый ТекстовыйДокумент;

			СтрукДалее.ТДок = ТДок;

			Если _СинхронныеВызовыЗапрещены Тогда
				ТДок.НачатьЧтение(Новый ОписаниеОповещения("вЗагрузитьАлгоритмыИзФайлаДалее", ЭтаФорма, СтрукДалее),
					ВыбранныеФайлы[0]);
			Иначе
				ТДок.Прочитать(ВыбранныеФайлы[0]);
				вЗагрузитьАлгоритмыИзФайлаДалее(СтрукДалее);
			КонецЕсли;
		Исключение
			вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьАлгоритмыИзФайлаДалее(ДопПараметры) Экспорт
	ТДок = ДопПараметры.ТДок;
	УзелДЗ = ДопПараметры.УзелДЗ;

	Попытка
		СтрокаДанных = ТДок.ПолучитьТекст();

		Попытка
			Струк = вЗначениеИзСтрокиВнутр(СтрокаДанных);
		Исключение
			вСообщитьОбОшибке("Неверный формат файла алгоритмов!");
			Возврат;
		КонецПопытки;

		Если Не вПроверитьДанныеПередЗагрузкойАлгоритмов(Струк) Тогда
			Возврат;
		КонецЕсли;

		вЗагрузитьЦепочкуАлгоритмовИзМассива(УзелДЗ, Струк.Элементы);
		Элементы._ДеревоАлгоритмов.Развернуть(УзелДЗ.ПолучитьИдентификатор(), Ложь);
	Исключение
		вСообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если ДопПараметры.ПутьКФайлуАлгоритмов <> Неопределено Тогда
		_ПутьКФайлуАлгоритмов = ДопПараметры.ПутьКФайлуАлгоритмов;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьДеревоАлгоритмов()
	_ДеревоАлгоритмов.ПолучитьЭлементы().Очистить();

	НС = _ДеревоАлгоритмов.ПолучитьЭлементы().Добавить();
	НС.Имя = "Алгоритмы";
	НС.Алгоритм = "// КОРНЕВОЙ АЛГОРИТМ НЕ ИСПОЛЬЗУЕТСЯ //";
	НС.Параметры = Новый Структура;

	вАлгоритмыИзменены(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьДеревоАлгоритмов(Команда)
	_ПутьКФайлуАлгоритмов = "";
	вОчиститьДеревоАлгоритмов();
КонецПроцедуры

&НаКлиенте
Процедура _ЗагрузитьФайлАлгоритмов(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(Истина, _ПутьКФайлуАлгоритмов);
	Диалог.Показать(Новый ОписаниеОповещения("вЗагрузитьАлгоритмыИзФайла", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлАлгоритмов(Команда)
	Если Не ЗначениеЗаполнено(_ПутьКФайлуАлгоритмов) Тогда
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(Ложь);
		Диалог.Показать(Новый ОписаниеОповещения("вСохранитьАлгоритмыВФайл", ЭтаФорма));
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(_ПутьКФайлуАлгоритмов);
		вСохранитьАлгоритмыВФайл(Массив, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайлАлгоритмовКак(Команда)
	Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(Ложь, _ПутьКФайлуАлгоритмов);
	Диалог.Показать(Новый ОписаниеОповещения("вСохранитьАлгоритмыВФайл", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьАлгоритмВФайл(Команда)
	ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(Ложь);
		Диалог.Показать(Новый ОписаниеОповещения("вСохранитьАлгоритмыВФайл", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПодгрузитьАлгоритмИзФайла(Команда)
	ТекДанные = Элементы._ДеревоАлгоритмов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Диалог = вПолучитьДиалогВыбораФайлаАлгоритмов(Истина);
		Диалог.Показать(Новый ОписаниеОповещения("вЗагрузитьАлгоритмыИзФайла", ЭтаФорма, ТекДанные));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытий

&НаКлиенте
Процедура вУстановитьДоступностьРедактированияАлгоритма(ТолькоПросмотр)
	Элементы._ДеревоАлгоритмовИмя.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Алгоритм.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ОписаниеАлгоритма.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СтрПараметрыАлгоритма.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Функция вСформироватьСтруктуруПараметровАлгоритма()
	Струк = Новый Структура("мДата, мДатаВремя, мДокумент, мПВХ, мПеречисление, мСписокЗначений, мСправочник, мСчет, мЧисло");
	Возврат Струк;
КонецФункции

&НаКлиенте
Функция вСкопироватьСтруктуруПараметровАлгоритма(СтрукИсточник)
	Результат = Новый Структура;

	Если СтрукИсточник <> Неопределено Тогда
		Для Каждого Элем Из СтрукИсточник Цикл
			Если Элем.Ключ = "мСписокЗначений" Тогда
				Результат.Вставить(Элем.Ключ, Элем.Значение.Скопировать());
			Иначе
				Результат.Вставить(Элем.Ключ, Элем.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура вСохранитьПараметрыАлгоритма(СтрДЗ)
	Если СтрДЗ <> Неопределено Тогда
		СтрДЗ.Параметры = Новый Структура;
		Для Каждого Элем Из вСформироватьСтруктуруПараметровАлгоритма() Цикл
			Значение = ЭтаФорма[Элем.Ключ];
			Если ЗначениеЗаполнено(Значение) Тогда
				СтрДЗ.Параметры.Вставить(Элем.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВосстановитьПараметрыАлгоритма(СтрДЗ)
	Если СтрДЗ <> Неопределено Тогда
		Если СтрДЗ.Параметры = Неопределено Тогда
			СтрДЗ.Параметры = Новый Структура;
		КонецЕсли;
		Струк = вСформироватьСтруктуруПараметровАлгоритма();
		ЗаполнитьЗначенияСвойств(Струк, СтрДЗ.Параметры);
		Для Каждого Элем Из Струк Цикл
			ЭтаФорма[Элем.Ключ] = Элем.Значение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСкопироватьСтрокуДереваАлгоритмов(Приемник, Источник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Параметры");
	Приемник.Параметры = вСкопироватьСтруктуруПараметровАлгоритма(Источник.Параметры);

	ДочерниеЭлементыИсточника = Источник.ПолучитьЭлементы();
	ДочерниеЭлементыПриемника = Приемник.ПолучитьЭлементы();
	Для Каждого СтрДЗ Из ДочерниеЭлементыИсточника Цикл
		;
		НС = ДочерниеЭлементыПриемника.Добавить();
		вСкопироватьСтрокуДереваАлгоритмов(НС, СтрДЗ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вПереподчинитьАлгоритм(СтрДЗ, НоваяСемья)
	вСкопироватьСтрокуДереваАлгоритмов(НоваяСемья.Добавить(), СтрДЗ);
КонецПроцедуры
&НаКлиенте
Процедура АлгоритмПриИзменении(Элемент)
	вАлгоритмыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеАлгоритмаПриИзменении(Элемент)
	вАлгоритмыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПриИзменении(Элемент)
	вАлгоритмыИзменены(Истина);
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		вПоказатьПредупреждение("Нельзя удалить корневой элемент дерева!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		мИсточникКопирования = -1;
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено И ТекДанные.ПолучитьРодителя() = Неопределено Тогда
			вПоказатьПредупреждение("Нельзя скопировать корневой элемент дерева!");
			Отказ = Истина;
		Иначе
			мИсточникКопирования = ТекДанные.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПриАктивизацииСтроки(Элемент)
	Если мТекСтрокаДереваАлгоритмов <> -1 Тогда
		ТекДанные = _ДеревоАлгоритмов.НайтиПоИдентификатору(мТекСтрокаДереваАлгоритмов);
		Если ТекДанные <> Неопределено Тогда
			вСохранитьПараметрыАлгоритма(ТекДанные);
		КонецЕсли;
	КонецЕсли;

	мТекСтрокаДереваАлгоритмов = -1;

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		мТекСтрокаДереваАлгоритмов = ТекДанные.ПолучитьИдентификатор();
		вВосстановитьПараметрыАлгоритма(ТекДанные);
		вУстановитьДоступностьРедактированияАлгоритма(ТекДанные = вКореньДереваАлгоритмов());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Копирование Тогда
		ВсеОК = Ложь;

		Если мИсточникКопирования <> -1 Тогда
			ДанныеИсточник = _ДеревоАлгоритмов.НайтиПоИдентификатору(мИсточникКопирования);
			Если ДанныеИсточник <> Неопределено Тогда
				вСкопироватьСтрокуДереваАлгоритмов(ТекДанные, ДанныеИсточник);
				вВосстановитьПараметрыАлгоритма(ТекДанные);
				ВсеОК = Истина;
			КонецЕсли;
		КонецЕсли;

		Если Не ВсеОК Тогда
			// сюда попадать не должны!!!
			ТекДанные.Параметры = вСкопироватьСтруктуруПараметровАлгоритма(ТекДанные.Параметры);
			вВосстановитьПараметрыАлгоритма(ТекДанные);
		КонецЕсли;

	ИначеЕсли НоваяСтрока Тогда
		ТекДанные.Параметры = Новый Структура;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	мИсточникПеретаскивания = "Алгоритмы";
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если мИсточникПеретаскивания <> "Алгоритмы" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ДеревоАлгоритмовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;

	Если мИсточникПеретаскивания = "Алгоритмы" И Строка <> Неопределено И мСтрокаПеретаскивания <> Неопределено Тогда
		НовыйРодитель = _ДеревоАлгоритмов.НайтиПоИдентификатору(Строка);
		Если НовыйРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Потомок = мСтрокаПеретаскивания;
		ПрежнийРодитель = Потомок.ПолучитьРодителя();
		Если ПрежнийРодитель <> Неопределено И Строка <> ПрежнийРодитель.ПолучитьИдентификатор() Тогда
			Если Не вПотомокПроисходитОтПредка(Потомок, НовыйРодитель) Тогда
				вПереподчинитьАлгоритм(Потомок, НовыйРодитель.ПолучитьЭлементы());
				ПрежняяСемья = ПрежнийРодитель.ПолучитьЭлементы();
				ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Потомок));
				вАлгоритмыИзменены(Истина);
			Иначе
				вПоказатьПредупреждение("Зацикливание подчиненности - переподчинение невозможно!");
			КонецЕсли;
		КонецЕсли;
		мСтрокаПеретаскивания = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область ОткрытиеОбъектовВСпецФорма

&НаКлиенте
Процедура _ОткрытьОбъект(Команда)
	Значение = Неопределено;

	ТекЭлемент = ЭтаФорма.ТекущийЭлемент;
	Если ТипЗнч(ТекЭлемент) = Тип("ТаблицаФормы") И (ТекЭлемент = Элементы._ТабРезультатыЗапроса Или ТекЭлемент
		= Элементы._ВременнаяТаблицаДанные Или ТекЭлемент = Элементы._ДеревоРезультатыЗапроса) Тогда
		ТекДанные = ТекЭлемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекПоле = ТекЭлемент.ТекущийЭлемент;
			ИмяКолонки = Сред(ТекПоле.Имя, СтрДлина(ТекЭлемент.Имя) + 2);
			Значение = ТекДанные[ИмяКолонки];
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = мТипХЗ Тогда
			вПоказатьЗначениеХЗ(Значение);
		ИначеЕсли вЭтоОбъектМетаданных(ТипЗнч(Значение)) Тогда
			СтрукПарам = Новый Структура;
			СтрукПарам.Вставить("мОбъектСсылка", Значение);
			ОткрытьФорму("Обработка.УИ_РедакторРеквизитовОбъекта.Форма", СтрукПарам, , Значение);

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьЗначениеХЗ(Значение)
	СтрукПарам = Новый Структура;
	СтрукПарам.Вставить("ДанныеХЗ", Значение);
	ОткрытьФорму("ОбщаяФорма.УИ_ФормаХранилищаЗначения", СтрукПарам, , ТекущаяДата());
КонецПроцедуры

&НаСервереБезКонтекста
Функция вЭтоОбъектМетаданных(Знач Тип)
	ОбъектМД = Метаданные.НайтиПоТипу(Тип);
	Возврат (ОбъектМД <> Неопределено И Не Метаданные.Перечисления.Содержит(ОбъектМД));
КонецФункции
#КонецОбласти