#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьАдресБиблиотекиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КаталогСохраненияБибилиотеки=КаталогВременныхФайлов() + "jsoneditor";
	ФайлРедактора=Новый Файл(КаталогСохраненияБибилиотеки);
	Пока ФайлРедактора.Существует() Цикл
		Попытка
			УдалитьФайлы(КаталогСохраненияБибилиотеки);
		Исключение
			КаталогСохраненияБибилиотеки=КаталогСохраненияБибилиотеки + "1";
		КонецПопытки;
	КонецЦикла;

	СоздатьКаталог(КаталогСохраненияБибилиотеки);

	СохранитьБиблиотекуРедактораНаДиск();
	УстановитьТекстHTMLПоляРедактора();
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Попытка
		УдалитьФайлы(КаталогСохраненияБибилиотеки);
	Исключение
		// TODO:
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ПолеРедактораДокументСформирован(Элемент)
//	УстановитьJSONВHTML(Элемент,"");
КонецПроцедуры

&НаКлиенте
Процедура ПолеРедактораСтрокаДокументСформирован(Элемент)
//	УстановитьJSONВHTML(Элемент,"");
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзСтрокиВДерево(Команда)
	СтрокаJSON=СтрокаJSONИзПоляРедактора(Элементы.ПолеРедактораСтрока);
	УстановитьJSONВHTML(Элементы.ПолеРедактораДерево, СтрокаJSON);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзДереваВСтроку(Команда)
	СтрокаJSON=СтрокаJSONИзПоляРедактора(Элементы.ПолеРедактораДерево);
	УстановитьJSONВHTML(Элементы.ПолеРедактораСтрока, СтрокаJSON);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьJSONВHTML(ЭлементПоляРедактора, СтрокаJSON)
	ДокументHTML=ЭлементПоляРедактора.Документ;
	Если ДокументHTML.parentWindow = Неопределено Тогда
		СтруктураДокументаДОМ = ДокументHTML.defaultView;
	Иначе
		СтруктураДокументаДОМ = ДокументHTML.parentWindow;
	КонецЕсли;
	СтруктураДокументаДОМ.editor.setText(СтрокаJSON);
//	СтруктураДокументаДОМ.editor.refresh();
//	СтруктураДокументаДОМ.editor.expandAll();
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаJSONИзПоляРедактора(ЭлементПоляРедактора)
	ДокументHTML=ЭлементПоляРедактора.Документ;
	Если ДокументHTML.parentWindow = Неопределено Тогда
		СтруктураДокументаДОМ = ДокументHTML.defaultView;
	Иначе
		СтруктураДокументаДОМ = ДокументHTML.parentWindow;
	КонецЕсли;
//	Возврат СтруктураДокументаДОМ.editor.getText();
	Возврат СтруктураДокументаДОМ.getJSON();
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекстHTMLПоляРедактора()
	ТекстCSS=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + "jsoneditor.css";
	ТекстJS=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + "jsoneditor.js";
	
	Шаблон=
	"<!DOCTYPE HTML>
	|<html>
	|<head>
	|  <title>JSONEditor | Synchronize two editors</title>
	|
	|	<link href="""+ТекстCSS+""" rel=""stylesheet"" type=""text/css"">
	|  <script src="""+ТекстJS+"""></script>
	|
	|  <style type=""text/css"">
	|    body {
	|      font-family: sans-serif;
	|    }
	|
	|   .jsoneditor {
	|      width: 100%;
	|      height: 100%;
//	|      margin-right: 10px;
//	|      display: inline-block;
	|    }
	|  </style>
	|</head>
	|<body>
	|	<div class=""jsoneditor"" id=""jsoneditor""></div>
	|
	|<script>
	|
	|  var container = document.getElementById('jsoneditor')
	|  var options = {
	|    // switch between pt-BR or en for testing forcing a language
	|    // leave blank to get language
 	|   'language': 'ru-RU',
 	|   mode: '###РежимРедактора###'
//	|   modes: ['code', 'form', 'text', 'tree', 'view', 'preview'], // allowed modes

	|  }
	|  var editor = new JSONEditor(container, options)
	|
	|	function getJSON(){
	|		return JSON.stringify(editor.get(), null, 2);
	|	}
	|
	|
	|</script>
	|</body>
	|</html>";
	ПолеРедактораДерево=СтрЗаменить(Шаблон, "###РежимРедактора###", "tree");
	ПолеРедактораСтрока=СтрЗаменить(Шаблон, "###РежимРедактора###", "code");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьБиблиотекуРедактораНаДиск()
	СоответствиеФайловБиблиотеки=ПолучитьИзВременногоХранилища(АдресБиблиотеки);
	Для Каждого КлючЗначение Из СоответствиеФайловБиблиотеки Цикл
		ИмяФайла=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + КлючЗначение.Ключ;

		КлючЗначение.Значение.Записать(ИмяФайла);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресБиблиотекиНаСервере()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");

	ДвоичныеДанныеБиблиотеки=ОбработкаОбъект.ПолучитьМакет("jsoneditor");

	КаталогНаСервере=ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогНаСервере);

	Поток=ДвоичныеДанныеБиблиотеки.ОткрытьПотокДляЧтения();

	ЧтениеZIP=Новый ЧтениеZipФайла(Поток);
	ЧтениеZIP.ИзвлечьВсе(КаталогНаСервере, РежимВосстановленияПутейФайловZIP.Восстанавливать);

	СтруктураБиблиотеки=Новый Соответствие;

	ФайлыАрхива=НайтиФайлы(КаталогНаСервере, "*", Истина);
	Для Каждого ФайлБиблиотеки Из ФайлыАрхива Цикл
		КлючФайла=СтрЗаменить(ФайлБиблиотеки.ПолноеИмя, КаталогНаСервере + ПолучитьРазделительПути(), "");
		Если ФайлБиблиотеки.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		СтруктураБиблиотеки.Вставить(КлючФайла, Новый ДвоичныеДанные(ФайлБиблиотеки.ПолноеИмя));
	КонецЦикла;

	АдресБиблиотеки=ПоместитьВоВременноеХранилище(СтруктураБиблиотеки, УникальныйИдентификатор);

	Попытка
		УдалитьФайлы(КаталогНаСервере);
	Исключение
		// TODO:
	КонецПопытки;

КонецПроцедуры



#КонецОбласти