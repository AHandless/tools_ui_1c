
#Область СобытияФормы

#КонецОбласти

#Область СобытияКомандФормы

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	СтруктураПередачи = Неопределено;
	ВыполнитьАлгоритмНаКлиенте(СтруктураПередачи);
	ВыполнитьАлгоритмНаСервере(СтруктураПередачи);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Диалог.Заголовок = "Выберите имя файла для открытия";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = "Файл алгоритма(*.xbsl)|*.xbsl|Все файлы(*.*)|*.*"; //Для обратной совместимости с *.alg1c
	Диалог.Расширение = "xbsl";

	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтаФорма), , Диалог, Истина, УникальныйИдентификатор, );

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

	Диалог.Заголовок = "Выберите имя файла для сохранения";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = "Файл алгоритма(*.xbsl)|*.xbsl";
	Диалог.Расширение = "xbsl";

	ПолучаемыеФайлы = Новый Массив;
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеФайла.Хранение = ПоместитьВоВременноеХранилище(ПолучитьСтрокуСохранения(), УникальныйИдентификатор);

	ПолучаемыеФайлы.Добавить(ОписаниеФайла);

	НачатьПолучениеФайлов(Новый ОписаниеОповещения("СохранитьФайлЗавершение", ЭтаФорма), ПолучаемыеФайлы, Диалог, Истина);
КонецПроцедуры

#КонецОбласти

#Область ПрочиеФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовленныйКодАлгоритма(ТекстКода, Переменные)
	ПодготовленныйКод="";

	Для НомерПеременной=0 По Переменные.Количество()-1 Цикл
		ТекПеременная=Переменные[НомерПеременной];
		ПодготовленныйКод=ПодготовленныйКод+Символы.ПС+ТекПеременная.Имя+"=Переменные["+Формат(НомерПеременной, "ЧН=0; ЧГ=0;")+"].Значение;";
	КонецЦикла;

	ПодготовленныйКод=ПодготовленныйКод+Символы.ПС+ТекстКода;
	
	Возврат ПодготовленныйКод;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьАлгоритм(ТекстАлготима,Переменные,СтруктураПередачи)
	Успешно = Истина;
	ОписаниеОшибки = "";

	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		Выполнить (ТекстАлготима);
	Исключение
		Успешно = Ложь;
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
	КонецПопытки;
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успешно", Успешно);
	РезультатВыполнения.Вставить("ВремяВыполнения", ОкончаниеВыполнения
		- НачалоВыполнения);
	РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);

	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Процедура ВыполнитьАлгоритмНаКлиенте(СтруктураПередачи)
	КодАлгоритма = ПодготовленныйКодАлгоритма(ТекстАлгоритмаКлиент, ПеременныеКлиент);

	Если Не ЗначениеЗаполнено(СокрЛП(КодАлгоритма)) Тогда
		Возврат;
	КонецЕсли;

	РезультатыВыполнения = ВыполнитьАлгоритм(КодАлгоритма,ПеременныеКлиент,СтруктураПередачи);

	Если РезультатыВыполнения.Успешно Тогда
		ЗаголовокЭлемента = "&&НаКлиенте (Время выполнения кода: "
			+ Строка((РезультатыВыполнения.ВремяВыполнения) / 1000) + " сек.)";
	Иначе
		ЗаголовокЭлемента = "&&НаКлиенте";
	КонецЕсли;
	Элементы.ГруппаКлиент.Заголовок = ЗаголовокЭлемента;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмНаСервере(СтруктураПередачи)
	КодАлгоритма = ПодготовленныйКодАлгоритма(ТекстАлгоритмаСервер, ПеременныеСервер);

	Если Не ЗначениеЗаполнено(СокрЛП(КодАлгоритма)) Тогда
		Возврат;
	КонецЕсли;

	РезультатыВыполнения = ВыполнитьАлгоритм(КодАлгоритма,ПеременныеСервер,СтруктураПередачи);

	Если РезультатыВыполнения.Успешно Тогда
		ЗаголовокЭлемента = "&&НаСервере (Время выполнения кода: "
			+ Строка((РезультатыВыполнения.ВремяВыполнения) / 1000) + " сек.)";
	Иначе
		ЗаголовокЭлемента = "&&НаСервере";
	КонецЕсли;
	Элементы.ГруппаСервер.Заголовок = ЗаголовокЭлемента;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуСохранения()

	СохраняемыеДанные = Новый Структура;
	СохраняемыеДанные.Вставить("ТекстАлгоритмаКлиент",ТекстАлгоритмаКлиент);
	СохраняемыеДанные.Вставить("ТекстАлгоритмаСервер",ТекстАлгоритмаСервер);
	
	МассивПеременных=Новый Массив;
	Для каждого ТекПеременная ИЗ ПеременныеКлиент Цикл
		СтруктураПеременной=Новый Структура;
		СтруктураПеременной.Вставить("Имя",ТекПеременная.Имя);
		СтруктураПеременной.Вставить("Значение",ЗначениеВСтрокуВнутр(ТекПеременная.Значение));
		
		МассивПеременных.Добавить(СтруктураПеременной);
	КонецЦикла;
	СохраняемыеДанные.Вставить("ПеременныеКлиент",МассивПеременных);
	
	МассивПеременных=Новый Массив;
	Для каждого ТекПеременная ИЗ ПеременныеСервер Цикл
		СтруктураПеременной=Новый Структура;
		СтруктураПеременной.Вставить("Имя",ТекПеременная.Имя);
		СтруктураПеременной.Вставить("Значение",ЗначениеВСтрокуВнутр(ТекПеременная.Значение));
		
		МассивПеременных.Добавить(СтруктураПеременной);
	КонецЦикла;
	СохраняемыеДанные.Вставить("ПеременныеСервер",МассивПеременных);
	
	ЗаписьJSON=Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СохраняемыеДанные);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаКлиенте
Процедура СохранитьФайлЗавершение(ПолученныеФайлы,
		ДополнительныеПараметры) Экспорт

	Модифицированность=Ложь;
	Сообщить("Алгоритм успешно сохранен");

КонецПроцедуры

&НаСервере
Процедура ОткрытьАлгоритмНаСервере(АдресФайлаВоВременномХранилище)
	
	
	ДанныеФайла=ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЧтениеJSON=Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ДанныеФайла.ОткрытьПотокДляЧтения());
	
	СтруктураФайла=ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ТекстАлгоритмаКлиент=СтруктураФайла.ТекстАлгоритмаКлиент;
	ТекстАлгоритмаСервер=СтруктураФайла.ТекстАлгоритмаСервер;
	
	ПеременныеКлиент.Очистить();
	Для Каждого Переменная ИЗ СтруктураФайла.ПеременныеКлиент Цикл
		НС=ПеременныеКлиент.Добавить();
		НС.Имя=Переменная.Имя;
		НС.Значение=ЗначениеИзСтрокиВнутр(Переменная.Значение);
	КонецЦикла;	
	
	ПеременныеСервер.Очистить();
	Для Каждого Переменная ИЗ СтруктураФайла.ПеременныеСервер Цикл
		НС=ПеременныеСервер.Добавить();
		НС.Имя=Переменная.Имя;
		НС.Значение=ЗначениеИзСтрокиВнутр(Переменная.Значение);
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗавершение(Результат, Адрес, ПомещаемыйФайл, ДополнительныеПараметры) Экспорт

	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьАлгоритмНаСервере(Адрес);
КонецПроцедуры

#КонецОбласти