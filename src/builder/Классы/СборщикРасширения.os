#Использовать v8runner
#Использовать v8find
#Использовать fs
#Использовать tempfiles

Перем КаталогИсходныхФайлов;
Перем КаталогИсходныхФайловРезультирующегоРасширения;
Перем ВариантСборки Экспорт;
Перем КаталогРезультатаСборки;
Перем Лог;
Перем МенеджерВременныхФайлов;

Процедура УстановитьКаталогИсходныхФайлов(Каталог) Экспорт
	КаталогИсходныхФайлов=Каталог;
КонецПроцедуры

Процедура УстановитьКаталогРезультатаСборки(Каталог) Экспорт
	КаталогРезультатаСборки = Каталог;
	МенеджерВременныхФайлов.БазовыйКаталог = ОбъединитьПути(КаталогРезультатаСборки, "tmp");
	
КонецПроцедуры

Процедура УстановитьЛог(НовыйЛог) Экспорт
	Лог=НовыйЛог;
КонецПроцедуры

Процедура УдалитьСтруктурыТаблицДанных(ОписаниеОсновногоРасширения)
	ПодчиненныеОбъектыОсновногоРасширения = ОписаниеОсновногоРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];
	
	Для Каждого ПодчиненныйОбъект ИЗ ПодчиненныеОбъектыОсновногоРасширения Цикл
		Если ТипЗнч(ПодчиненныйОбъект) = Тип("КлючИЗначение") Тогда
			Ключ = ПодчиненныйОбъект.Ключ;
			Значение=ПодчиненныйОбъект.Значение;
		Иначе
			Ключ = ПодчиненныйОбъект[0].Ключ;
			Значение=ПодчиненныйОбъект[0].Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьСборкуИсходников() Экспорт
	
	КаталогИсходныхФайловРезультирующегоРасширения = КаталогРезультатаСборки;
	
	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогИсходныхФайлов, "Инструменты"), КаталогИсходныхФайловРезультирующегоРасширения);
	
	ПроцессорXML = Новый СериализаторXML();
	
	ОписаниеОсновногоРасширения = ПроцессорXML.ПрочитатьИзФайла(ОбъединитьПути(КаталогИсходныхФайловРезультирующегоРасширения, "Configuration.xml"));
	// ОписаниеРасширенияИнтеграции = ПроцессорXML.ПрочитатьИзФайла(ОбъединитьПути(ВременныйКаталогРасширенияИнтеграции, "Configuration.xml"));
	
	СвойстваКонфигурацииОсновногоРасширения = ОписаниеОсновногоРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["Properties"];
	Если ЗначениеЗаполнено(ВариантСборки.СуффиксИмени) Тогда
		СвойстваКонфигурацииОсновногоРасширения["Name"] = СвойстваКонфигурацииОсновногоРасширения["Name"] + "_" + ВариантСборки.СуффиксИмени;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВариантСборки.СуффиксСинонима) Тогда
		СвойстваКонфигурацииОсновногоРасширения["Synonym"]["v8:item"]["v8:content"] = СвойстваКонфигурацииОсновногоРасширения["Synonym"]["v8:item"]["v8:content"] + " " + ВариантСборки.СуффиксСинонима;
	КонецЕсли;
	
	Если ВариантСборки.ИсключатьТаблицыБД Тогда
		УдалитьСтруктурыТаблицДанных(ОписаниеОсновногоРасширения);
	КонецЕсли;
	ПодчиненныеОбъектыОсновногоРасширения=ОписаниеОсновногоРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];
	// ПодчиненныеОбъектыРасширенияИнтеграции = ОписаниеРасширенияИнтеграции["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];
	
	// Для Каждого ПодчиненныйОбъект ИЗ ПодчиненныеОбъектыРасширенияИнтеграции Цикл
	// 	Если ТипЗнч(ПодчиненныйОбъект) = Тип("КлючИЗначение") Тогда
	// 		Ключ = ПодчиненныйОбъект.Ключ;
	// 		Значение=ПодчиненныйОбъект.Значение;
	// 	Иначе
	// 		Ключ = ПодчиненныйОбъект[0].Ключ;
	// 		Значение=ПодчиненныйОбъект[0].Значение;
	// 	КонецЕсли;
	// 	Если ТипЗнч(ПодчиненныеОбъектыОсновногоРасширения) = Тип("Соответствие") Тогда
	// 		ПодчиненныеОбъектыОсновногоРасширения.Вставить(Ключ, Значение);
	// 	Иначе
	
	// 		СоответствиеВставки = Новый Соответствие();
	// 		СоответствиеВставки.Вставить(Ключ, Значение);
	// 		ПодчиненныеОбъектыОсновногоРасширения.Добавить(СоответствиеВставки);
	// 	КонецЕсли;
	
	// 	//Теперь нужно скопировать нужную папку
	// 	ИмяКаталогаОбъекта="";
	// 	Если Ключ = "CommonModule" Тогда
	// 		ИмяКаталогаОбъекта = "CommonModules";
	// 	КонецЕсли;
	
	// 	Если Не ЗначениеЗаполнено(ИмяКаталогаОбъекта) Тогда
	// 		Лог.Ошибка("Не удалось определить местоположения объекта "+Ключ+" "+Значение);
	// 		Продолжить;
	// 	КонецЕсли;
	
	// 	//Основной файл
	// 	КопироватьФайл(
	// 	ОбъединитьПути(ВременныйКаталогРасширенияИнтеграции, ИмяКаталогаОбъекта, Значение + ".xml"), 
	// 	ОбъединитьПути(КаталогИсходныхФайловРезультирующегоРасширения, ИмяКаталогаОбъекта, Значение + ".xml"));
	
	// 	ФС.КопироватьСодержимоеКаталога(
	// 	ОбъединитьПути(ВременныйКаталогРасширенияИнтеграции, ИмяКаталогаОбъекта, Значение), 
	// 	ОбъединитьПути(КаталогИсходныхФайловРезультирующегоРасширения, ИмяКаталогаОбъекта, Значение));
	// КонецЦикла;
	
	ПроцессорXML.ЗаписатьВФайл(ОписаниеОсновногоРасширения, ОбъединитьПути(КаталогИсходныхФайловРезультирующегоРасширения, "Configuration.xml"), Истина);
	
	МенеджерВременныхФайлов.Удалить();
	Если ЗначениеЗаполнено(МенеджерВременныхФайлов.БазовыйКаталог) Тогда
		УдалитьФайлы(МенеджерВременныхФайлов.БазовыйКаталог);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеБинарногоФайла(Знач ИмяФайлаРасширения) Экспорт
	
	ИмяВременнойБазы = МенеджерВременныхФайлов.СоздатьКаталог();
	ФС.ОбеспечитьКаталог(ИмяВременнойБазы);
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Лог.Информация(СтрШаблон("Создаю временную базу %1", ИмяВременнойБазы));
	Конфигуратор.СоздатьФайловуюБазу(ИмяВременнойБазы);
	
	Конфигуратор.УстановитьКонтекст("/F" + ИмяВременнойБазы, "", "");
	
	Лог.Информация(СтрШаблон("Загружаю исходные файлы в базу"));
	Конфигуратор.ЗагрузитьРасширениеИзФайлов(КаталогИсходныхФайловРезультирующегоРасширения, "УниверсальныеИнструменты");
	
	Конфигуратор.ВыгрузитьРасширениеВФайл(ИмяФайлаРасширения,  "УниверсальныеИнструменты");
	
	МенеджерВременныхФайлов.Удалить();
	УдалитьФайлы(МенеджерВременныхФайлов.БазовыйКаталог);
КонецПроцедуры

Лог = Новый Лог("app.build.tools_ui_1c");
МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов();
